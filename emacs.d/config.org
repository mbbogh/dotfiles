#+TITLE: common emcas comfiguration

* main part of my common emacs configuration

example for org-mode configurations
https://github.com/mwfogleman/config/blob/master/home/.emacs.d/michael.org
    package init, than read org with babel
https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org
    include only org with babel
https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
    include only .el

https://github.com/jwiegley/use-package
    this is the description for /use-package/

** misc

*** common

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

In the post [[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Pragmatic Emacs: Don’t kill-buffer, kill-this-buffer instead]] Ben Maughan states exactly what I nearly always do.
If I want to close a buffer, it is the one I'm in.
There was an /update post/ by [[http://irreal.org/blog/?p=5585][irreal]] to us the /universal-argument/ (C-u) to get back th old behaviour.
As I will not use any thing with this, I changed the simple key remap to the new function.
#+BEGIN_SRC emacs-lisp
;;(global-set-key (kbd "C-x k") 'kill-this-buffer)

(defun mbb-kill-a-buffer (askp)
  (interactive "P")
  (if askp
      (kill-buffer (funcall completing-read-function
                            "Kill buffer: "
                            (mapcar #'buffer-name (buffer-list))))
    (kill-this-buffer)))

(global-set-key (kbd "C-x k") 'mbb-kill-a-buffer)
#+END_SRC

*** GUI
#+BEGIN_SRC emacs-lisp
(if window-system
  (tool-bar-mode -1)
;;(menu-bar-mode -1)
)
#+END_SRC

*** on OS X
Get the key-layout as used by Linux/Windows.

TODO: test for OS X

https://github.com/stig/ob-applescript.el
not sure if I need this, bat keep the posibility in mind

#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil) ; needed for none US keyboards to enter symbols
#+END_SRC


** package support

Use not only the default package source but also melpa.

*** melpa

    Should /package-initialize/ be before or after melpa is added to the archive list?

#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)

(add-to-list 'package-archives'("melpa" . "https://melpa.org/packages/") t)

(package-refresh-contents)
;(setq package-enable-at-startup nil)
#+END_SRC

*** use-package

Looks like this is the simplest way to instal and configure packages.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

** tools
*** org

I think this is not needed

    (require 'org-install)

at least it is working without.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
;(setq org-export-coding-system ’utf-8)
#+END_SRC

**** capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
        '(("t" "Todo"
            entry (file+headline "~/notes/inbox/org_capture_todo.org" "Tasks")
            "* TODO %?\n %i\n %a")
          ("j" "Journal entry"
            entry (file+datetree "~/notes/inbox/journal.org")
            (file "~/.emacs.d/org-templates/journal.orgcaptmpl"))

;          ("b" "Tidbit: quote, zinger, one-liner or textlet"
;           entry
;           (file+headline org-default-notes-file "Tidbits")
;            (file "~/.emacs.d/org-templates/tidbit.orgcaptmpl"))

         )
)
#+END_SRC

*** evil

from evil home page https://bitbucket.org/lyro/evil/wiki/Home

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init (evil-mode 1)
  :bind (("M-x" . smex)
         :map evil-insert-state-map
         ("M-x" . execute-extended-command)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :config
  (global-linum-mode)
  (setq linum-format 'linum-relative) ; didn't need in old config - what's the difference?
  (setq linum-relative-current-symbol "") ; http://emacs.stackexchange.com/questions/19532/hybrid-line-number-mode-in-emacs
)
#+END_SRC

*** git

Started to use magit.
What is with the default /version control/ handling of emacs?

Not sure what key to use. Looks like most use /C-x g/.
This key, like /C-c g/ was not used on my setup.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))
#+END_SRC

*** projectile
[[https://github.com/bbatsov/projectile][project on github]]
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init (projectile-global-mode))
;; tip from Python IDE: if yoy really like the menu, show it immediately
;;(set ac-show-menu-immediately-on-auto-complete t)

#+END_SRC
*** helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :bind (("C-x b" . helm-buffers-list)
         ("C-x r b" . helm-bookmarks)))
#+END_SRC

*** mail
Should I use /gnus/ again? Or continue with mutt?

alternatives
- [[https://www.emacswiki.org/emacs/mu4e][mu4e]] like mu

** programming

*** flycheck
Started with the blog post [Using Emacs 12](http://cestlaz.github.io/posts/using-emacs-12-python/).

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (global-flycheck-mode t))
#+END_SRC

*** JavaScrip
Read before starting the setup.
- [[http://blog.binchen.org/posts/use-js2-mode-as-minor-mode-to-process-json.html][JSON]]
** test

*** golden ratio

Was talked about in one of the hangouts.
The split window will not be 50/50, but the active one will be 2/3.

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t
  :diminish golden-ratio-mode
  :init
  (golden-ratio-mode 1)
  (setq golden-ratio-auto-scale t))
#+END_SRC

*** missing

https://github.com/magnars/multiple-cursors.el

*** Imenu

https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html
The Imenu facility offers a way to find the major definitions in a file by name.
Could be used in a C file to see all function definitions.

https://github.com/bmag/imenu-list
this will give a much better selection for /Imenu/

*** outorg
https://github.com/tj64/outorg
switch from programming language to org mode for simpler commenting the code

*** gtags

The simple example I've seen in /planet emacs/ didn't work properly.
Started to collect information from the projects.
Basic /gtags/ search worked.

Use /ggtags/ (uninstalled) or /helm-gtags/.
Will use /helm-gtags/.

Found a good [[http://tuhdo.github.io/c-ide.htm][C-IDE]] description and started to follow. This came from [[http://emacs.stackexchange.com/questions/801/how-to-get-intelligent-auto-completion-in-c][emacs stackexchange]].
Read all his other instructions.

#+BEGIN_SRC emacs-lisp
(use-package helm-gtags
  :ensure t
  :init
  (custom-set-variables
    '(helm-gtags-path-style 'relative)
    '(helm-gtags-ignore-case t)
    '(helm-gtags-auto-update t)
    '(helm-gtags-use-input-at-cursor t)
    '(helm-gtags-pulse-at-cursor t)
    '(helm-gtags-prefix-key "\C-cg")
    '(helm-gtags-suggested-key-mapping t))
  :config
    (add-hook 'dired-mode-hook 'helm-gtags-mode)
    (add-hook 'eshell-mode-hook 'helm-gtags-mode)
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (add-hook 'asm-mode-hook 'helm-gtags-mode)
    (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
    (define-key helm-gtags-mode-map (kbd "M-]") 'helm-gtags-dwim)
    (define-key helm-gtags-mode-map (kbd "M-[") 'helm-gtags-pop-stack)
    (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
    (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))

#+END_SRC

#+RESULTS:
: helm-gtags-next-history

didn't work, get void :map
  :bind (:map helm-gtags-mode-map
         ("C-c g a" . helm-gtags-tags-in-this-function)
         ("C-j" . helm-gtags-select)
         ("M-." . helm-gtags-dwim) --- at least this one doesn't work due to eval mode (command (repeat last command), in insert OK)
         ("M-," . helm-gtags-pop-stack)
         ("C-c <" . helm-gtags-previous-history)
         ("C-c >" . helm-gtags-next-history)))

*** speedbar
#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar
  :ensure t)
#+END_SRC

*** auto complete
looks like /company/ is the prefered solution.
what about projectile, I instlled from the Python IDE example?

http://emacs.stackexchange.com/questions/712/what-are-the-differences-between-autocomplete-and-company-mode
https://www.reddit.com/r/emacs/comments/2ekw22/autocompletemode_vs_companymode_which_is_better/

*** expand region
    from cestlaz 17
    does this work with eval mode?
    #+BEGIN_SRC emacs-lisp
      (use-package expand-region
        :ensure t
        :config
        (global-set-key (kbd "C-=") 'er/expand-region))
    #+END_SRC
