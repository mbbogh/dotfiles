#+SEQ_TODO: LATER(l) TODO(t) THINK(k) TRY(y) | DONE(d) MAYBE_ONE_DAY(m)
#+TAGS: READ(r) IN_TEST(t)
#+TITLE: common emcas comfiguration

* introduction

example for org-mode configurations
https://github.com/mwfogleman/config/blob/master/home/.emacs.d/michael.org
    package init, than read org with babel
https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org
    include only org with babel
https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
    include only .el

https://github.com/jwiegley/use-package
    this is the description for /use-package/

* misc

check out https://github.com/mathiasdahl/dotemacs/blob/master/barebones.el

** common

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq column-number-mode t)
(show-paren-mode 1)

(setq-default indent-tabs-mode nil)
(setq tab-width 4) ; or any other preferred value

(setq-default fill-column 132)

(add-to-list 'auto-mode-alist '("Makefile.*" . makefile-gmake-mode))
#+END_SRC

*** THINK [[http://pragmaticemacs.com/emacs/add-the-system-clipboard-to-the-emacs-kill-ring/][Add the system clipboard to the Emacs kill-ring]]      :READ:IN_TEST:
#+BEGIN_QUOTE
I (Ben Maughan) wrote previously about [[http://pragmaticemacs.com/emacs/automatically-copy-text-selected-with-the-mouse/][adding mouse selections in Emacs to the system clipboard]], and here is another tip to integrate the system
clipboard more nicely with Emacs. This comes from the fantastic [[https://github.com/dakrone/eos/blob/master/eos.org][Emacs operating system]]set of configuration files, which are full of
gems like this (thanks to [[http://irreal.org/blog/?p=5688][Irreal]] for pointing me to EOS).

By default, if you copy something to the system clipboard (e.g. some text in firefox) and then copy or kill some text in Emacs, then
the text from firefox is lost. If you set the option below in your [[http://pragmaticemacs.com/emacs/editing-your-emacs-config-file/][emacs config file]] then copying or killing text in Emacs will add
the system clipboard text to the kill-ring so that you can find it when you [[http://pragmaticemacs.com/emacs/counsel-yank-pop-with-a-tweak/][cycle through your clipboard history in Emacs]].
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
;; Save whatever's in the current (system) clipboard before replacing it with the Emacs text.
;; https://github.com/dakrone/eos/blob/master/eos.org
(setq save-interprogram-paste-before-kill t)
#+END_SRC
** GUI
In the post [[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Pragmatic Emacs: Don’t kill-buffer, kill-this-buffer instead]] Ben Maughan states exactly what I nearly always do.
If I want to close a buffer, it is the one I'm in.
There was an /update post/ by [[http://irreal.org/blog/?p=5585][irreal]] to us the /universal-argument/ (C-u) to get back th old behaviour.
As I will not use any thing with this, I changed the simple key remap to the new function.
#+BEGIN_SRC emacs-lisp
;;(global-set-key (kbd "C-x k") 'kill-this-buffer)

(defun mbb-kill-a-buffer (askp)
  (interactive "P")
  (if askp
      (kill-buffer (funcall completing-read-function
                            "Kill buffer: "
                            (mapcar #'buffer-name (buffer-list))))
    (kill-this-buffer)))

(global-set-key (kbd "C-x k") 'mbb-kill-a-buffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(if window-system
  (tool-bar-mode -1)
;;(menu-bar-mode -1)
; moved to back of config
;  (scroll-bar-mode -1)
;  (fringe-mode 1) ;; show glyphs regarding the line - this reduced the buffer frame
)
#+END_SRC

*** Pasting with the mouse without moving the point
Emacs in GUI mode will paste with middle-click at the mouse cursor position, not the point (like Vim).
This bit me quite often. Disabled.

#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point t)
#+END_SRC

** on OS X
Get the key-layout as used by Linux/Windows.

TODO: test for OS X

https://github.com/stig/ob-applescript.el
not sure if I need this, bat keep the posibility in mind

see http://ergoemacs.org/emacs/emacs_hyper_super_keys.html
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil) ; needed for none US keyboards to enter symbols
#+END_SRC


* package support

Use not only the default package source but also melpa.

** melpa

    Should /package-initialize/ be before or after melpa is added to the archive list?

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives'("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

(package-refresh-contents)
#+END_SRC

** use-package

Looks like this is the simplest way to instal and configure packages.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

* tools
** org

I think this is not needed

    (require 'org-install)

at least it is working without.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
;(setq org-export-coding-system ’utf-8)
#+END_SRC

*** org-babel
[[https://github.com/astahlman/ob-async][ob-async]] enables asynchronous execution of org-babel src blocks
for this to work simply add *:async* to the #+BEGIN_SRC line
so far not sure if I need it, disadvantages?

plantUML setup from
- http://plantuml.com/emacs
- http://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html
#+BEGIN_SRC emacs-lisp
;; active Org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (plantuml . t)
   (python . t)
  ))

; https://emacs.stackexchange.com/questions/13107/replace-plantuml-source-with-generated-image-in-org-mode
(add-hook 'org-babel-after-execute-hook
          (lambda ()
            (when org-inline-image-overlays
              (org-redisplay-inline-images))))

(setq org-plantuml-jar-path
      (expand-file-name "~/bin/plantuml.jar"))
#+END_SRC

do I need the major mode plugin? https://github.com/skuro/plantuml-mode
path and other setup http://www.alvinsim.com/diagrams-with-plantuml-and-emacs/


*** capture
    http://orgmode.org/manual/Capture-templates.html
    http://orgmode.org/guide/Capture-templates.html
    http://orgmode.org/manual/Template-expansion.html
    http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/
    http://koenig-haunstetten.de/2014/08/29/the-power-of-orgmode-capture-templates/
    https://lists.gnu.org/archive/html/emacs-orgmode/2010-08/msg00458.html
    http://stackoverflow.com/questions/9005843/interactively-enter-headline-under-which-to-place-an-entry-using-capture
    http://stackoverflow.com/questions/13550799/how-to-use-org-mode-capture-refile-mechanism-to-build-my-own-vocabulary

should change the hard coded path to a shell variable
(getenv "HOST")
this could be tricky on the Mac is started via teh dock
https://stackoverflow.com/questions/9663396/how-do-i-make-emacs-recognize-bash-environment-variables-for-compilation

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
        '(("t" "capture todos"
            entry (file+headline "/media/sf_E_DRIVE/repos/emacs_notes/capture.org" "Tasks")
            "* TODO %^{prompt}\n:DATE: %U\n:TAGS: %^g\n%i\n%a\n%?")
          ("n" "capture note"
            entry (file+headline "/media/sf_E_DRIVE/repos/emacs_notes/capture.org" "Notes")
            "* %^{prompt}\n:DATE: %U\n\n%?")
          ("j" "Journal entry"
            entry (file+datetree "/media/sf_E_DRIVE/repos/emacs_notes/journal.org")
            "* %?\nEntered on %U\n  %i\n  %a")
          ("2" "CHM2T")
           ("2t" "capture todos"
             entry (file+headline "/media/sf_E_DRIVE/repos/emacs_notes/chm2t_capture.org" "Tasks")
             "* TODO %^{prompt}\n:DATE: %U\n:TAGS: %^g\n%i\n%a\n%?")
           ("2n" "capture note"
             entry (file+headline "/media/sf_E_DRIVE/repos/emacs_notes/chm2t_capture.org" "Notes")
             "* %^{prompt}\n:DATE: %U\n\n%?")
           ("2j" "Journal entry"
             entry (file+datetree "/media/sf_E_DRIVE/repos/emacs_notes/chm2t_journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")
          ("c" "work CM from jira"
            entry (file+headline "/media/sf_E_DRIVE/repos/emacs_notes/work_cm.org" %^{prompt}))
          ("s" "code snippet"
            entry (file "/tmp/snippets.org")
            "* %?\n%(my/org-capture-code-snippet \"%F\")")
         )
)
#+END_SRC

**** support functions
The _irreal_ post [[http://irreal.org/blog/?p=7207][Capturing Code Snippets]] directed me to the example on how to automate the information gathering for code snippets
from source code files.
#+BEGIN_SRC emacs-lisp
(defun my/org-capture-get-src-block-string (major-mode)
    "Given a major mode symbol, return the associated org-src block
    string that will enable syntax highlighting for that language

    E.g. tuareg-mode will return 'ocaml', python-mode 'python', etc..."

    (let ((mm (intern (replace-regexp-in-string "-mode" "" (format "%s" major-mode)))))
      (or (car (rassoc mm org-src-lang-modes)) (format "%s" mm))))

(defun my/org-capture-code-snippet ()
    (let ( (a "string a")
           (file-name (buffer-file-name))
           (b "string b"))
         (format "%s file: %s : %s >>%s<<" b f a file-name)))
#+END_SRC

add description from org and mike file


#+BEGIN_SRC emacs-lisp
    (add-to-list 'org-structure-template-alist
                 '("C" "#+BEGIN_COMMENT\n?\n#+END_COMMENT" ""))
#+END_SRC

*** my keyboard macros
This will convert an Markdown link []() to an org mode link [[][]].

https://www.emacswiki.org/emacs/KeyboardMacros
    M-x name-last-kbd-macro
    M-x insert-kbd-macro ---> bekomme das macro als text

    wieder verwenden
    Zeile obe (fset) mit eval-region "einlesen"
    Zeike unten "interaktive" ausfuehren
    global-set-key (kbd "C-c a") 'my-macro
#+BEGIN_SRC emacs-lisp
(fset 'md-link2-org
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([58 115 35 92 91 92 40 46 42 92 41 92 93 40 92 40 46 42 92 41 41 35 91 91 92 50 93 91 92 49 93 93 35 return] 0 "%d")) arg)))
;; checked, 'm' is not defined, but there should be still a better key
;; also, move it from global to org key table
(global-set-key (kbd "C-c m") 'md-link2-org)
#+END_SRC

** evil
from evil [[https://github.com/emacs-evil/evil][home page]]
evil requires _undo tree_
not configured, did evil load it automatically from melpa?

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init (evil-mode 1)
;  :bind (("M-x" . smex) search function not only from the start, but the middle - didn't use that feature
;         :map evil-insert-state-map
;         ("M-x" . execute-extended-command))
)
#+END_SRC

*** line numbers
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :config
  (global-linum-mode)
  (setq linum-format 'linum-relative) ; didn't need in old config - what's the difference?
  (setq linum-relative-current-symbol "") ; http://emacs.stackexchange.com/questions/19532/hybrid-line-number-mode-in-emacs
)
#+END_SRC

*** increase/decrease numbers
Not part of default emacs. There is the [[https://github.com/cofi/evil-numbers][evil numbers]] module to add this feature.
In vim C-a and C-x are used. I think I shouldn't use C-x.
Start using the =default= C-+ and C--, but only in =normal= mode, as it is the default for =org table sum/substract=.
#+BEGIN_SRC emacs-lisp
(use-package evil-numbers
  :ensure t
  :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt)
)
#+END_SRC

*** test
cicles throug different cases
dossent find word borders, needs to be already in one of the different spellings
#+BEGIN_SRC emacs-lisp
(use-package evil-string-inflection
    :ensure t)
#+END_SRC

*** evil-matchit
https://github.com/redguardtoo/evil-matchit

use _%_ like before to champ to matching brace
but it now works also for e.g. HTML tags

this is not perfect
with HTML-tags _together_ it will sometimes jump to the next
jumps behind _>_ if there is an open tag, it will jump to this end tag, if it is an end tag it works
need to be on 1st char of end tag _</_ is ignored, _<_ will even be the tag before
#+BEGIN_SRC emacs-lisp
(use-package evil-matchit
  :ensure t
  :init (global-evil-matchit-mode 1)
)
#+END_SRC

** git
*** [[https://github.com/magit/magit][magit]]
Started to use magit.
What is with the default /version control/ handling of emacs?

Not sure what key to use. Looks like most use /C-x g/.
This key, like /C-c g/ was not used on my setup.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))
#+END_SRC

** projectile
[[https://github.com/bbatsov/projectile][project on github]]

Known projects are stored in _~/.emacs.d/projectile-bookmarks.eld_. A _new_ project is automatically added if I edid a file that is
part of a git repo.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init (projectile-global-mode))
;; tip from Python IDE: if you really like the menu, show it immediately
;;(set ac-show-menu-immediately-on-auto-complete t)

#+END_SRC
** helm
https://github.com/emacs-helm/helm

in an old config I used: (require 'helm-config)

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :bind (("C-x b" . helm-buffers-list)
         ("C-x r b" . helm-bookmarks)))
#+END_SRC

*** TODO from interview with Sacha
*Q:* Not many packages are nearly as powerful as Helm. Being so, it may be hard for potential users to understand its value and
potential. How could newcomers be encouraged to contribute to Helm’s development?

*A:* People are often thinking that helm is a vertical version of ido, but it’s not: it’s much more powerful. It would be too long
to enumerate all that it does, but here’s a small example among the many features helm provides:

In ido or similar tools, when you complete files, the only thing you can do is press RET to jump to a file. With helm there are
actually 44 actions possible, not including the ones that are automatically added depending on the context (i.e. filtered
actions). All of these actions are applicable to one or many marked files, whereas in ido you can act on only one file. If you need
a specific action that’s not part of helm by default, you can add it into the helm framework, which is same philosophy as Emacs.

#+BEGIN_COMMENT
should look into these features
#+END_COMMENT
*** insert Sonderzeichen
comment from [[http://irreal.org/blog/?p=6623#comment-3540040227][John Kitchin]] points to this function as part of his [[https://github.com/jkitchin/scimax/blob/master/scimax-org.el][scimax package]]
#+BEGIN_EXAMPLE
M-x helm-insert-org-entity
uu
F2
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
(defun helm-insert-org-entity ()
  "Helm interface to insert an entity from `org-entities'.
F1 inserts utf-8 character
F2 inserts entity code
F3 inserts LaTeX code (does not wrap in math-mode)
F4 inserts HTML code
F5 inserts the entity code."
  (interactive)
  (helm :sources
	(reverse
	 (let ((sources '())
	       toplevel
	       secondlevel)
	   (dolist (element (append
			     '("* User" "** User entities")
			     org-entities-user org-entities))
	     (when (and (stringp element)
			(s-starts-with? "* " element))
	       (setq toplevel element))
	     (when (and (stringp element)
			(s-starts-with? "** " element))
	       (setq secondlevel element)
	       (add-to-list
		'sources
		`((name . ,(concat
			    toplevel
			    (replace-regexp-in-string
			     "\\*\\*" " - " secondlevel)))
		  (candidates . nil)
		  (action . (("insert utf-8 char" . (lambda (x)
						      (mapc (lambda (candidate)
							      (insert (nth 6 candidate)))
							    (helm-marked-candidates))))
			     ("insert org entity" . (lambda (x)
						      (mapc (lambda (candidate)
							      (insert
							       (concat "\\" (car candidate))))
							    (helm-marked-candidates))))
			     ("insert latex" . (lambda (x)
						 (mapc (lambda (candidate)
							 (insert (nth 1 candidate)))
						       (helm-marked-candidates))))
			     ("insert html" . (lambda (x)
						(mapc (lambda (candidate)
							(insert (nth 3 candidate)))
						      (helm-marked-candidates))))
			     ("insert code" . (lambda (x)
						(mapc (lambda (candidate)
							(insert (format "%S" candidate)))
						      (helm-marked-candidates)))))))))
	     (when (and element (listp element))
	       (setf (cdr (assoc 'candidates (car sources)))
		     (append
		      (cdr (assoc 'candidates (car sources)))
		      (list (cons
			     (format "%10s %s" (nth 6 element) element)
			     element))))))
	   sources))))
#+END_SRC
** mail
Should I use /gnus/ again? Or continue with mutt?

alternatives
- [[https://www.emacswiki.org/emacs/mu4e][mu4e]] like mu
** dictionary
*** sdcv
commands you can use:
- sdcv-search-pointer: Search around word and display with buffer
- sdcv-search-pointer+: Search around word and display with =popup tooltip=
- sdcv-search-input: Search input word and display with buffer
- sdcv-search-input+: Search input word and display with =popup tooltip=

If current mark is active, sdcv commands will translate region string, otherwise translate word around point.

And then you need set two options.
- sdcv-dictionary-simple-list:   a simple dictionary list for popup tooltip display
- sdcv-dictionary-complete-list: a complete dictionary list for buffer display

Example, setup like this:

#+BEGIN_SRC emacs-lisp
(use-package sdcv
  :ensure t
  :bind (("C-c d a" . sdcv-search-input)
         ("C-c d b" . sdcv-search-pointer+))
  :config
    (setq sdcv-dictionary-simple-list
        '("German - English"
            "English - German"))
    (setq sdcv-dictionary-complete-list
        '("German - English"
            "English - German")))
#+END_SRC
*** powerthesaurus
selected word or input
result in minibuffer, only one line, difficult to find a word
#+BEGIN_SRC emacs-lisp
(use-package powerthesaurus
  :ensure t
  :bind (("C-c d p" . powerthesaurus-lookup-word)))
#+END_SRC
*** define-word
needed to enter the word, didn't use the word at point, as advertised
#+BEGIN_SRC emacs-lisp
(use-package define-word
  :ensure t
  :bind (("C-c d d" . define-word)))
#+END_SRC

* programming
** common
*** [[https://gitlab.com/jgkamat/rmsbolt][RMSbolt]]

#+BEGIN_SRC emacs-lisp
use-package rmsbolt
  :ensure t)
#+END_SRC

** C/C++
see https://www.emacswiki.org/emacs/IndentingC

https://github.com/Sarcasm/irony-mode

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x c") 'compile)

;(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

(setq c-default-style "stroustrup"
    c-basic-offset 4)

(use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)

  ;; replace the `completion-at-point' and `complete-symbol' bindings in
  ;; irony-mode's buffers by irony-mode's function
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package rtags
  :ensure t)
#+END_SRC
not sure what happened, an update of packages on t30 removed this and the flycheck-rtags package as =unused=
** flycheck
Started with the blog post [Using Emacs 12](http://cestlaz.github.io/posts/using-emacs-12-python/).
http://melpa.org/#/flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (global-flycheck-mode t))
#+END_SRC
from flycheck-rtags melpa page
#+BEGIN_QUOTE
Optional explicitly select the RTags Flycheck checker for c or c++ major mode.
Turn off Flycheck highlighting, use the RTags one.
Turn off automatic Flycheck syntax checking rtags does this manually.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(use-package flycheck-rtags
  :ensure t
  :config
  (defun my-flycheck-rtags-setup ()
    "Configure flycheck-rtags for better experience."
    (flycheck-select-checker 'rtags)
    (setq-local flycheck-check-syntax-automatically nil)
    (setq-local flycheck-highlighting-mode nil))
  (add-hook 'c-mode-hook 'my-flycheck-rtags-setup)
  (add-hook 'c++-mode-hook 'my-flycheck-rtags-setup)
  (add-hook 'objc-mode-hook 'my-flycheck-rtags-setup)
)
#+END_SRC
** JavaScrip
Read before starting the setup.
- [[http://blog.binchen.org/posts/use-js2-mode-as-minor-mode-to-process-json.html][JSON]]
- [[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][Emacs café: Setting up Emacs for JavaScript (part #1)]]
- [[https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html][Emacs café: Setting up Emacs for JavaScript (part #2)]]

* test
** [[http://xenodium.com/#actionable-urls-in-emacs-buffers][actionable URLs in Emacs buffers]]
use C-c C-o to open URL in browser not only for org-buffer
his configuration wiht =:hook= didn't work - not known
added the lines seperately
#+BEGIN_SRC emacs-lisp
(use-package goto-addr
  :init
    (add-hook 'compilation-mode 'goto-address-mode)
    (add-hook 'prog-mode 'goto-address-prog-mode)
    (add-hook 'eshell-mode 'goto-address-mode)
    (add-hook 'shell-mode 'goto-address-mode)
  :bind (:map goto-address-highlight-keymap
              ("C-c C-o" . goto-address-at-point))
              ;("M-<RET>" . newline)
  :commands (goto-address-prog-mode
             goto-address-mode))
#+END_SRC

** quickrun
https://github.com/syohex/emacs-quickrun
** yasnippet

https://github.com/joaotavora/yasnippet
https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d
http://melpa.org/#/yasnippet

Chen Bin:
    My tip is to assign a unique hot key for yas/expand. So you can use single character as the key of your most frequently used
    snippet. "a" for assert "l" for log and "i" for include. Other snippets are rarely used actually.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
    (setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
        ;"/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
        ;"/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
        ))
    (yas-global-mode 1))
#+END_SRC

*** [[https://github.com/AndreaCrotti/yasnippet-snippets][examples/defaults in own repo]]
check which ones to use

** golden ratio

Was talked about in one of the hangouts.
The split window will not be 50/50, but the active one will be 2/3.

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t
  :diminish golden-ratio-mode
  :init
  (golden-ratio-mode 1)
  (setq golden-ratio-auto-scale t))
#+END_SRC

** missing

https://github.com/magnars/multiple-cursors.el

*** from VB LXDE
Should check if the jedi/autocomplete configuration conflict with one of the other now used projects.
If I remember correctly the Python setup didn't work.

**** call search engine
https://github.com/hrs/engine-mode
https://www.youtube.com/watch?v=MBhJBMYfWUo

default key binding C-x /
  :x / s
will trigger the stackoverflow search with selection

(require 'engine-mode)
(engine-mode t)
(defengine stack-overflow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "s")

(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "E"
  :docstring "Searchin' the wikis.")

**** some autocomplete test

(require 'jedi)
;; hook up to autocomplete
(add-to-list 'ac-sources 'ac-source-jedi-direct)
;; enable for python-mode
(add-hook 'python-mode-hook 'jedi:setup)

;;;
;;; the below is from youtube video
;;;
; https://www.youtube.com/watch?v=HTUE03LnaXA
; https://github.com/byuksel/Emacs-as-a-C-Cplusplus-Editor-IDE-settings/blob/master/.emacs
; search for _auto-complete_ on melpa to get more features, e.g. for clang or haskel
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

; missing are flymake (not sure, shouldn't I use flycheck?
; but he used it for the google coding style
; + some more

; https://github.com/auto-complete/auto-complete
; http://auto-complete.org/doc/manual.html

** Imenu

https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html
The Imenu facility offers a way to find the major definitions in a file by name.
Could be used in a C file to see all function definitions.

https://github.com/bmag/imenu-list
this will give a much better selection for /Imenu/

** outorg
https://github.com/tj64/outorg
switch from programming language to org mode for simpler commenting the code

** gtags
   https://github.com/syohex/emacs-helm-gtags

*dwim* looks like a usefull command *M-]*
Still not sure what to use to jump to definition of /name/ under cursor/.

The simple example I've seen in /planet emacs/ didn't work properly.
Started to collect information from the projects.
Basic /gtags/ search worked.

Use /ggtags/ (uninstalled) or /helm-gtags/.
Will use /helm-gtags/.

Found a good [[http://tuhdo.github.io/c-ide.htm][C-IDE]] description and started to follow. This came from [[http://emacs.stackexchange.com/questions/801/how-to-get-intelligent-auto-completion-in-c][emacs stackexchange]].
Read all his other instructions.

#+BEGIN_SRC emacs-lisp
(use-package helm-gtags
  :ensure t
  :init
  (custom-set-variables
    '(helm-gtags-path-style 'relative)
    '(helm-gtags-ignore-case t)
    '(helm-gtags-auto-update t)
    '(helm-gtags-use-input-at-cursor t)
    '(helm-gtags-pulse-at-cursor t)
    '(helm-gtags-prefix-key "\C-cg")
    '(helm-gtags-suggested-key-mapping t))
  :config
    (add-hook 'dired-mode-hook 'helm-gtags-mode)
    (add-hook 'eshell-mode-hook 'helm-gtags-mode)
;    (add-hook 'c-mode-hook 'helm-gtags-mode)
;    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (add-hook 'asm-mode-hook 'helm-gtags-mode)
    (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
    (define-key helm-gtags-mode-map (kbd "M-]") 'helm-gtags-dwim)
    (define-key helm-gtags-mode-map (kbd "M-[") 'helm-gtags-pop-stack)
    (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
    (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))

#+END_SRC

#+RESULTS:
: helm-gtags-next-history

didn't work, get void :map
  :bind (:map helm-gtags-mode-map
         ("C-c g a" . helm-gtags-tags-in-this-function)
         ("C-j" . helm-gtags-select)
         ("M-." . helm-gtags-dwim) --- at least this one doesn't work due to eval mode (command (repeat last command), in insert OK)
         ("M-," . helm-gtags-pop-stack)
         ("C-c <" . helm-gtags-previous-history)
         ("C-c >" . helm-gtags-next-history)))

** speedbar
   didn't use this feature in eclipse
   it still looks /as bad/ as some years ago
#+BEGIN_SRC emacs-lisp
;(use-package sr-speedbar
;  :ensure t)
#+END_SRC

** auto complete
looks like /company/ is the prefered solution.
what about projectile, I instlled from the Python IDE example?

http://emacs.stackexchange.com/questions/712/what-are-the-differences-between-autocomplete-and-company-mode
https://www.reddit.com/r/emacs/comments/2ekw22/autocompletemode_vs_companymode_which_is_better/

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** [[https://github.com/abo-abo/ace-window][ace-window]]
got from Mike Zamansky [[http://cestlaz.github.io/posts/using-emacs-5-windows/][video 5]]

*** from an irreal post
The other day I was reading that you can change the default ace-window action before selecting the window to change to. By pressing
m you can swap the current window with one of the others. Of course, that only works when there are three or more windows. When
there are two windows it simply changes window focus immediately.

I wondered if there was a way to force one of the alternate actions so I typed Ctrl+u Ctrl+x o as an experiment. It immediately
swapped the windows. I checked the documentation and discovered that if you type Ctrl+u twice before calling ace-window it will
delete the current window. I’m not sure why you’d want that instead of the easier Ctrl+x k but that’s what happens.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+END_SRC

Looks like this /disables/ the 2/3 window handling.
** lua
http://immerrr.github.io/lua-mode/

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :ensure t)
#+END_SRC

** using emacs
*** 1

#+BEGIN_SRC emacs-lisp

(use-package try
	:ensure t)

(use-package which-key
	:ensure t
	:config
	(which-key-mode))

#+END_SRC

*** expand region
    from cestlaz 17
    does this work with eval mode?
    #+BEGIN_SRC emacs-lisp
      (use-package expand-region
        :ensure t
        :config
        (global-set-key (kbd "C-=") 'er/expand-region))
    #+END_SRC
** markdown
Create own cheatsheet from:
- [Mastering Markdown](https://guides.github.com/features/mastering-markdown/)
- [Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)

Started with _Sacha_  [[https://www.reddit.com/r/emacs/comments/5jvr5i/is_it_possible_to_realtime_preview_markdown_in/][Is it possible to real-time preview markdown in Emacs]] 
One recommendation there was [[https://github.com/mola-T/flymd][flymd]] on [[http://wikemacs.org/wiki/Markdown#Live_preview_as_you_type][wikiemacs]]
*** flymd
runs javascript from _rawgit.com_
update only after file is saved
working only with _firefox_
#+BEGIN_SRC emacs-lisp
;;(use-package flymd
;;	:ensure t)
#+END_SRC

*** [[http://jblevins.org/projects/markdown-mode/][markdown mode]]
No sure where I got the hint to try this one.
It is also part of the _reddit_ recommendation above.
But as I had red it, I didn't ty it. Can't remember why.

markdown-toggle-inline-images
default key shortcut C-c C-x C-i ist not working

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
*** TODO fence edit
provides a convenient way to edit the contents of "fenced code blocks" used by markup formats like Markdown in a dedicated window
set to the major mode appropriate for its language
https://github.com/aaronbieber/fence-edit.el

** epub
https://github.com/wasamasa/nov.el
nur lesen

https://github.com/bddean/emacs-ereader
mit org-mode und annotations

#+BEGIN_SRC emacs-lisp
(use-package ereader
  :ensure t)
#+END_SRC
** THINK evil-expat

http://melpa.org/#/evil-expat

this will add some vim _ex_ commands like :DiffOrig or :Remove
but many like :Tyank, :Tput (tmux related) or :colorscheme I will not use or need

** eyebrowse
read many thinks about it, but still not sure

*** [[https://www.reddit.com/r/emacs/comments/6sffrd/am_i_misunderstanding_eyebrowse/][Am I misunderstanding eyebrowse?]]
interesting read, but I still not sure if this is for me
- use i3 to manage different emacs-client
  - OK for different projects, e.g. notes, CHM2T, ...
- use a special page with calc and other littele tools to have a fix window size
  - this I think I should try

*** [[http://pragmaticemacs.com/emacs/easily-manage-emacs-workspaces-with-eyebrowse/][Pragmatic Emacs: Easily manage Emacs workspaces with eyebrowse]]

#+BEGIN_EXAMPLE
(use-package eyebrowse
    :diminish eyebrowse-mode
    :config (progn
            (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
            (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
            (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
            (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
            (eyebrowse-mode t)
            (setq eyebrowse-new-workspace t)))
#+END_EXAMPLE

The enables the shortcuts =M-1= to =M-4= to access 4 virtual desktops (N.B. you will have to [[http://pragmaticemacs.com/emacs/use-your-digits-and-a-personal-key-map-for-super-shortcuts/][disable]] the =M-=numeric prefixes
first). Of course you can add more than 4 if you need to.

Now you will start by default in workspace 1. If you hit =M-2= you will switch to a new empty workspace, numbered 2 in the
modeline. It will initially just contain the scratch buffer, since we used =(setq eyebrowse-new-workspace t)=. Open whichever
buffers and window arrangements you like then hit =M-1=to switch back to the first desktop where you will see the windows and
buffers you had set up there.

A useful command is =C-c C-w ,= (N.B. the comma is part of the command!) which runs =eyebrowse-rename-window-config= allowing you to
name a workspace, and that name then appears in the modeline instead of the workspace number.

* last steps
If done at begin of script the _scrollbar_ and _fringe_ change.
A litter later these are bag as before. Try now as the last step of the configuration.

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
;(fringe-mode 1) ;; show glyphs regarding the line - this reduced the buffer frame
                 ;; if set to _1_ not linewraps etc are displayed
                 ;; 0 will show the _terminal_ character
#+END_SRC
