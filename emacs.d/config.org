#+SEQ_TODO: LATER(l) TODO(t) THINK(k) TRY(y) | DONE(d) MAYBE_ONE_DAY(m)
#+TAGS: READ(r) IN_TEST(t)
#+TITLE: common emcas comfiguration

set DICPATH in OS dependant are
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
(setq exec-path (append exec-path '("/usr/local/bin")))

(setenv "DICPATH" "/Library/Spelling")
#+END_SRC

https://stackoverflow.com/questions/8606954/path-and-exec-path-set-but-emacs-does-not-find-executable
he has now a full packet to handle that
do I need this or should I change MacOS to local plist to handle GUI path?
https://superuser.com/questions/476752/setting-environment-variables-in-os-x-for-gui-applications
https://apple.stackexchange.com/questions/106355/setting-the-system-wide-path-environment-variable-in-mavericks#

* TRY start-up messages and time
this is from [[id:23D5D84D-4751-4E82-ADDC-3DCE6CE84112][Andrea]]

also check =M-x emacs-init-time=

#+begin_src emacs-lisp
(defun mbb/init-audit-message (string)
  "Print out STRING and calculate length of init."
  (message string)
  (if (not (string= "end" (substring string -3)))
      (setq mbb/init-audit-message-begin (current-time))
    (message
     "It took %s seconds in total."
     (time-to-seconds
      (time-subtract
       (current-time)
       mbb/init-audit-message-begin))))
  nil)
#+end_src

* Setting global environment variables on OS X
It is a bit of a mystery for many Mac users how to create environment variables that will be available for all applications,
including those launched from icons, etc.

The process involves creating (or editing, if it exists) a special =environment.plist= file in the users home directory. You can add
the environment variable and it's value here. Then you have to log out and in.

Create the =plist= file under =~/Library/LaunchAgents/=:

#+BEGIN_EXAMPLE
    <?xml version="1.0" encoding="UTF-8"?>

    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">

    <plist version="1.0">
    <dict>
     <key>Label</key>
     <string>my.startup</string>
     <key>ProgramArguments</key>
     <array>
     <string>sh</string>
     <string>-c</string>
     <string>launchctl setenv RV_OS_PATH_OSX /volumes/zdisk
    launchctl setenv RV_OS_PATH_WINDOWS Z:</string>

     </array>
     <key>RunAtLoad</key>
     <true/>
    </dict>
    </plist>
#+END_EXAMPLE

To activate the =environment.plist= (assuming you named it =environment.plist=), run

#+BEGIN_EXAMPLE
    launchctl load ~/Library/LaunchAgents/environment.plist
    launchctl start ~/Library/LaunchAgents/environment.plist
#+END_EXAMPLE

If it is already loaded and you have modified the =plist file=, see your updates by running:

#+BEGIN_EXAMPLE
    launchctl stop ~/Library/LaunchAgents/environment.plist
    launchctl unload ~/Library/LaunchAgents/environment.plist
    launchctl load ~/Library/LaunchAgents/environment.plist
    launchctl start ~/Library/LaunchAgents/environment.plist
#+END_EXAMPLE

For further reference, [[https://apple.stackexchange.com/questions/106355/setting-the-system-wide-path-environment-variable-in-mavericks][see this StackExchange article]] which talks about setting environment variables in previous versions of OS X
up through 10.10 (which still works as of 10.12 Sierra).


* introduction

example for org-mode configurations
https://github.com/mwfogleman/config/blob/master/home/.emacs.d/michael.org
    package init, than read org with babel
https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org
    include only org with babel
https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
    include only .el

https://github.com/jwiegley/use-package
    this is the description for /use-package/

a [[https://github.com/caisah/emacs.dz][list]] with many emacs configurations

* TODO look deeper into this
git this from: https://github.com/marcowahl/.emacs.d
** first line of the tangle
#+begin_src emacs-lisp :comments none
;;; init.el --- personal emacs config file -*- lexical-binding: t ; eval: (view-mode 1)-*-
#+end_src

Set to read-only to make edits harder.  Recall that the tangled file
is not supposed to be edited.

** conform to el-tradition
The following lines are traditionally in every elisp file.  These
lines also please checkdoc, the elisp documentation checker.

#+begin_src emacs-lisp

;;; Commentary:

;; THIS FILE HAS BEEN GENERATED.


;;; Code:
#+end_src

** debugging
Switch on debugging, in case.

#+begin_src emacs-lisp
;(setq debug-on-error t)
#+end_src

Next time I should try out [[https://github.com/Malabarba/elisp-bug-hunter][bug hunter]] to check the configuration before the restart.

** TODO binding keys
should move over all =bind-key= to [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]] (:bind in use-package)
this enables me to very easy see all the changes with =describe-personal-keybindings=
* package support
update packages is done manually

=M-x list-packages= hit =U= to mark available upgrades, then review to decide if there are any I don't want to pick up. Then =x= to upgrade.

not sure if the refresh is done automatically, with =M-x package-list-packages= I always use =package-refresh-contents=.

** use-package

Looks like this is the simplest way to instal and configure packages.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

The /use-package/keyword /:diminish/ requires [[https://github.com/myrjola/diminish.el][diminish]] to be installed.
*do not display selected minor modes*
#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC
*** TRY select source
#+begin_example
  :pin git
#+end_example
to use ELPA instead of MELPA
the name is the one used in =package-list-packages=
*** TODO defer
is /defer/ no the default for all or do I need to add it explicitely?
#+BEGIN_EXAMPLE
  :defer 1
#+END_EXAMPLE
* misc

check out https://github.com/mathiasdahl/dotemacs/blob/master/barebones.el

** common

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq column-number-mode t)
(show-paren-mode 1)

(setq-default indent-tabs-mode nil) ; use space instead of tabs
(setq tab-width 2) ; or any other preferred value

(setq-default fill-column 132)

(add-to-list 'auto-mode-alist '("Makefile.*" . makefile-gmake-mode))
#+END_SRC

Making Indentation Behave Sanely (Electric Indent)
Something that was driving me nuts was Emacs electric-indent indenting the previous line when I press enter. Luckily, I came across a fix one day.
#+BEGIN_SRC emacs-lisp
(setq-default electric-indent-inhibit t)
#+END_SRC
try wraping at words and not hard at character coount

not sure if this is usefull, activate only in /text/ mode?
#+BEGIN_SRC emacs-lisp
(setq-default word-wrap 1)
#+END_SRC

*** Highlighting Tabs and Spaces Differently
Something that I feel that is very important to have in an editor is a way to identify spaces and tabs easily. They are both whitespace characters that can easily be confused for eachother.

We will accomplish this by making tabs appear visible as a “|” (pipe) character. If you want to highlight spaces too, please refer to [[http://ergoemacs.org/emacs/whitespace-mode.html][ErgoEmacs' article on making whitespace visible]].

#+BEGIN_EXAMPLE
    (global-whitespace-mode)
    (setq whitespace-style '(face tabs tab-mark trailing))
    (custom-set-faces
     '(whitespace-tab ((t (:foreground "#636363")))))

    (setq whitespace-display-mappings
      '((tab-mark 9 [124 9] [92 9])))
#+END_EXAMPLE

I have separated the =whitespace-display-mappings= portion of the snippet with a newline because it is the more confusing-to-read part of it.

The first four lines of the snippet are pretty easy to understand.

1. First you enable =global-whitespace-mode=. This makes our configured whitespace visible in all buffers automatically.
2. Next, you're setting the whitespace style to show tabs and trailing whitespace. You need =face= and =tabs= included there. I am not completely sure why, but they are needed in order to set the color of the pipe character.
3. After that, you're calling =custom-set-faces= to customize the appearance of the tab whitespace. I set the text color of our pipe character to be *#636363* which is a nice color if you're using a dark-themed Emacs theme. If you're using a light theme in Emacs, you'll want a lighter color such as *#c1c1c1*.

This is an example of #636363 on a dark background. It is supposed to be subtle.

This is an example of #c1c1c1 on a light background. It is supposed to be subtle.

The line that is a little bit confusing to read is the one where we actually set the pipe character.

All you really need to know about it is that =124= is the ascii ID of the pipe character (“|”). You can view [[http://rmhh.co.uk/ascii.html][a list of ascii character IDs here]].

*** THINK [[http://pragmaticemacs.com/emacs/add-the-system-clipboard-to-the-emacs-kill-ring/][Add the system clipboard to the Emacs kill-ring]]      :READ:IN_TEST:
#+BEGIN_QUOTE
I (Ben Maughan) wrote previously about [[http://pragmaticemacs.com/emacs/automatically-copy-text-selected-with-the-mouse/][adding mouse selections in Emacs to the system clipboard]], and here is another tip to integrate the system
clipboard more nicely with Emacs. This comes from the fantastic [[https://github.com/dakrone/eos/blob/master/eos.org][Emacs operating system]]set of configuration files, which are full of
gems like this (thanks to [[http://irreal.org/blog/?p=5688][Irreal]] for pointing me to EOS).

By default, if you copy something to the system clipboard (e.g. some text in firefox) and then copy or kill some text in Emacs, then
the text from firefox is lost. If you set the option below in your [[http://pragmaticemacs.com/emacs/editing-your-emacs-config-file/][emacs config file]] then copying or killing text in Emacs will add
the system clipboard text to the kill-ring so that you can find it when you [[http://pragmaticemacs.com/emacs/counsel-yank-pop-with-a-tweak/][cycle through your clipboard history in Emacs]].
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
;; Save whatever's in the current (system) clipboard before replacing it with the Emacs text.
;; https://github.com/dakrone/eos/blob/master/eos.org
(setq save-interprogram-paste-before-kill t)
#+END_SRC
** spell checking
from wikipedia:
- =spell= is the granddaddy, optimized for English
- =aspell= is an /ispell/ replacement to get a GPL version (ispell has a /coppy left license/
- =hunspell= originally developed for Hungarian it is usable  for many other languages, as it using a /morphological/ analyser.
  It is used (replaced ispell) for many projects like LibreOffice, Chromium, Firefox, Mac OS X, ...
  It is also the default installation on Fedora.

#+BEGIN_SRC emacs-lisp
    (setq ispell-program-name (executable-find "hunspell"))
    ;; For saving words to the personal dictionary, don't infer it from the locale, otherwise it would save to ~/.hunspell_de_DE.
    ;; file needs to exists, or it will not be used
    (setq ispell-personal-dictionary "~/.config/hunspell_personal")

    (setq ispell-dictionary "de_DE,en_GB") ; added 2nd entry how does this work? there is also more settings like this --- didn't see an effect
    ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
    ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
    (setq ispell-dictionary-alist '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB") nil utf-8)
                                    ("de_DE" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "de_DE_frami") nil utf-8)))
;;    (ispell-change-dictionary "en_GB" t) this failed - also all /1st/ iteractive actions fail
  (setq ispell-local-dictionary "en_GB")
  (setq ispell-local-dictionary-alist
        '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB") nil utf-8)
          ("de_DE" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "de_DE_frami") nil utf-8)
          ))
#+END_SRC

If you /ispell/ a buffer and want to edit the word use *C-r* (recursive-edit). This will not end the spell session. Exit with C-M-c
to keep the change and continue spell checking.

*** [[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][flyspell]]
/flyspell-auto-correct-previous-word/ will cycle through possible replacements for the 1st backward found misspelled word.
What is the difference to /flyspell-check-previous-highlighted-word/?

From a /flycheck/ feature reguest a got, that it is not for spell checking. On one hand it sounded reasonable, on the other how is
running the spell check on the whole buffer different to running the compiler on a source code file?

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :config
  (add-hook 'text-mode-hook #'flyspell-mode)       ; looks like not working - only org?
  (add-hook 'prog-mode-hook #'flyspell-prog-mode)) ; spellcheck comments automatically in source code
#+END_SRC

there are two modules to work with =helm=
- [[https://github.com/pronobis/helm-flyspell][helm-flyspell]] is helm only
- [[https://github.com/d12frosted/flyspell-correct][flyspell-correct-helm]] which is a generic module with adapters for also pop-up, ivy, ...
#+BEGIN_SRC emacs-lisp
   (use-package flyspell-correct-helm
     :bind ("C-M-;" . flyspell-correct-wrapper)
     :init
     (setq flyspell-correct-interface #'flyspell-correct-helm))
;    (use-package flyspell-correct-helm
;      :after flyspell)
;;    (define-key flyspell-mode-map (kbd "C-;") 'helm-flyspell-correct)
#+END_SRC
could not /find/ the function *helm-flyspell-correct*
not sure what is going on
*new config from the script file*

*** new : handling
With =M-x flyspell-mode=, you'll enable Flyspell mode which highlights all misspelled words. With =M-$=, you'll check and correct spelling of the word at point. With =M-x ispell-buffer=, you'll check and correct spelling in the buffer. See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][the docs]] for all available functions and keyboard shortcuts.

** GUI
In the post [[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Pragmatic Emacs: Don’t kill-buffer, kill-this-buffer instead]] Ben Maughan states exactly what I nearly always do.
If I want to close a buffer, it is the one I'm in.
There was an /update post/ by [[http://irreal.org/blog/?p=5585][irreal]] to us the /universal-argument/ (C-u) to get back th old behaviour.
As I will not use any thing with this, I changed the simple key remap to the new function.
#+BEGIN_SRC emacs-lisp
;;(global-set-key (kbd "C-x k") 'kill-this-buffer)

(defun mbb-kill-a-buffer (askp)
  (interactive "P")
  (if askp
      (kill-buffer (funcall completing-read-function
                            "Kill buffer: "
                            (mapcar #'buffer-name (buffer-list))))
    (kill-this-buffer)))

(global-set-key (kbd "C-x k") 'mbb-kill-a-buffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(if window-system
  (tool-bar-mode -1)
;;(menu-bar-mode -1)
; moved to back of config
;  (scroll-bar-mode -1)
;  (fringe-mode 1) ;; show glyphs regarding the line - this reduced the buffer frame
)
#+END_SRC

*** Pasting with the mouse without moving the point
Emacs in GUI mode will paste with middle-click at the mouse cursor position, not the point (like Vim).
This bit me quite often. Disabled.

#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point t)
#+END_SRC

** theme
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

(let ((basedir "~/.emacs.d/themes/"))
      (dolist (f (directory-files basedir))
        (if (and (not (or (equal f ".") (equal f "..")))
                 (file-directory-p (concat basedir f)))
            (add-to-list 'custom-theme-load-path (concat basedir f)))))

(add-to-list 'load-path "~/.emacs.d/themes/color-theme-sanityinc-tomorrow")
#+end_src

      modus-operandi-theme-slanted-constructs t
      modus-operandi-theme-bold-constructs t
      modus-operandi-theme-fringes 'subtle ; {nil,'subtle,'intense}
      modus-operandi-theme-mode-line '3d ; {nil,'3d,'moody}
      modus-operandi-theme-faint-syntax nil
      modus-operandi-theme-intense-hl-line nil
      modus-operandi-theme-intense-paren-match nil
      modus-operandi-theme-prompts nil ; {nil,'subtle,'intense}
      modus-operandi-theme-completions 'moderate ; {nil,'moderate,'opinionated}
      modus-operandi-theme-diffs nil ; {nil,'desaturated,'fg-only}
      modus-operandi-theme-org-blocks 'greyscale ; {nil,'greyscale,'rainbow}
      modus-operandi-theme-variable-pitch-headings t
      modus-operandi-theme-rainbow-headings t
      modus-operandi-theme-section-headings t
      modus-operandi-theme-scale-headings t
      modus-operandi-theme-scale-1 1.1
      modus-operandi-theme-scale-2 1.15
      modus-operandi-theme-scale-3 1.21
      modus-operandi-theme-scale-4 1.27
      modus-operandi-theme-scale-5 1.33
#+begin_src emacs-lisp
(setq modus-operandi-theme-bold-constructs t
      modus-operandi-theme-scale-headings t)
(load-theme 'modus-operandi t)
#+end_src
** on OS X
Get the key-layout as used by Linux/Windows.

TODO: test for OS X

https://github.com/stig/ob-applescript.el
not sure if I need this, bat keep the posibility in mind

*** keyboard
To map the physical key to emacs modifier use the variables
- ns-control-modifier :: alias mac-control-modifier
- ns-alternate-modifier :: alias ns-option-modifier and mac-option-modifier
- ns-command-modifier :: alias mac-command-modifier
- ns-function-modifier :: alias mac-function-modifier
and set to =control=, =meta=, =alt=, =super=, =hyper= or =none= (ignored by Emacs and retains its standard meaning).

This maps the /left/ and /right/ key. To map differently map the /normal/ and /right/ key (variable).
- ns-right-control-modifier :: alias mac-right-control-modifier
- ns-right-alternate-modifier :: alias ns-right-option-modifier and mac-right-option-modifier
- ns-right-command-modifier :: mac-right-command-modifier

see http://ergoemacs.org/emacs/emacs_hyper_super_keys.html
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil) ; needed for none US keyboards to enter symbols
#+END_SRC

start emacs to debug init
open -a /Applications/Emacs.app --args --debug-init

jump to error location with M-x goto-char

*** [[http://pragmaticemacs.com/emacs/case-insensitive-sorting-in-dired-on-os-x/][Pragmatic Emacs: Case-Insensitive Sorting in Dired on OS X]]
  :PROPERTIES:
  :AUTHOR: Ben Maughan
  :DATE: 20170821
  :END:
I like my [[http://pragmaticemacs.com/category/dired/][dired]] directory listings to be sorted by name regardless of case. This was a bit fiddly to get working in OS X, but I
found a solution using the built-in =ls-lisp= with a few extra options, rather than the system =ls= to generate the =dired= listing.

Here are the required settings:

#+BEGIN_SRC emacs-lisp
    ;; using ls-lisp with these settings gives case-insensitve
    ;; sorting on OS X
    (require 'ls-lisp)
    (setq dired-listing-switches "-alhG")
    (setq ls-lisp-use-insert-directory-program nil)
    (setq ls-lisp-ignore-case t)
    (setq ls-lisp-use-string-collate nil)
    ;; customise the appearance of the listing
    (setq ls-lisp-verbosity '(links uid))
    (setq ls-lisp-format-time-list '("%b %e %H:%M" "%b %e  %Y"))
    (setq ls-lisp-use-localized-time-format t)
#+END_SRC

One downside of this is that it breaks [[http://pragmaticemacs.com/emacs/speedy-sorting-in-dired-with-dired-quick-sort/][dired-quick-sort]], but I can live with that.

#+BEGIN_COMMENT
don't think this worked - do another test
#+END_COMMENT
* tools
** org

I think this is not needed

#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
;    (require 'org-install)

;(use-package org-plus-contrib
;  :config)
#+END_SRC

at least it is working without.
#+BEGIN_COMMENT
I think this is because I'm using the /version/ shiped with emacs.
Should think about installing org directly, as the included version is missing some parts, like =org-drill=.
#+END_COMMENT

#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture) ;;; TODO ;;; is this realy needed
;(setq org-export-coding-system ’utf-8)
#+END_SRC

By default org mode only fontifies spans of text wrapped in emphasis markers (customized with org-emphasis-alist) if they are in the same line.
As I reformat text blocks often with =M-q= a span might be split over two lines.
[[https://emacs.stackexchange.com/questions/18101/org-mode-multi-line-emphasis-and-bold][StackExchange]] has the answer.

#+BEGIN_SRC emacs-lisp
(setcar (nthcdr 4 org-emphasis-regexp-components) 1) ; the last number is the additional lines
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
#+END_SRC

But as some have trouble the link to a more [[https://emacs.stackexchange.com/questions/13820/inline-verbatim-and-code-with-quotes-in-org-mode/13828][detailed answer]] of a different question is useful.

Should not do it over too many lines, as otherwise it will catch math or other text.

*** tags
Setting Tags]]
possible to type tags directly (enclosed by ::)

(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))


#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))
#+END_SRC

*** org-babel
[[https://github.com/astahlman/ob-async][ob-async]] enables asynchronous execution of org-babel src blocks
for this to work simply add *:async* to the #+BEGIN_SRC line
so far not sure if I need it, disadvantages?

plantUML setup from
- http://plantuml.com/emacs
- http://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html
#+BEGIN_SRC emacs-lisp
;; active Org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (C . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html
   (ledger . t)
   (plantuml . t)
   (python . t)
   (shell . t)
   (sql . t)
  ))

; https://emacs.stackexchange.com/questions/13107/replace-plantuml-source-with-generated-image-in-org-mode
(add-hook 'org-babel-after-execute-hook
          (lambda ()
            (when org-inline-image-overlays
              (org-redisplay-inline-images))))

(setq org-plantuml-jar-path
      (expand-file-name "~/bin/plantuml.jar"))
#+END_SRC

do I need the major mode plugin? https://github.com/skuro/plantuml-mode
path and other setup http://www.alvinsim.com/diagrams-with-plantuml-and-emacs/

Varaibles I found set in some blog posts, but the default is OK
(setq org-src-fontify-natively t)

Finally, if you work with white-space sensitive languages such as python, remember to add the followings:
#+BEGIN_SRC emacs-lisp
  (setq org-edit-src-content-indentation 0)
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t)
#+END_SRC

tangle multiple C source-blocks https://emacs.stackexchange.com/questions/29939/c-c-coding-in-emacs-org-modes-babel
*** capture
    http://orgmode.org/manual/Capture-templates.html
    http://orgmode.org/guide/Capture-templates.html
    http://orgmode.org/manual/Template-expansion.html
    http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/
    http://koenig-haunstetten.de/2014/08/29/the-power-of-orgmode-capture-templates/
    https://lists.gnu.org/archive/html/emacs-orgmode/2010-08/msg00458.html
    http://stackoverflow.com/questions/9005843/interactively-enter-headline-under-which-to-place-an-entry-using-capture
    http://stackoverflow.com/questions/13550799/how-to-use-org-mode-capture-refile-mechanism-to-build-my-own-vocabulary

should change the hard coded path to a shell variable
(getenv "HOST")
this could be tricky on the Mac is started via teh dock
https://stackoverflow.com/questions/9663396/how-do-i-make-emacs-recognize-bash-environment-variables-for-compilation

tried to use a path, but both didn't work
https://emacs.stackexchange.com/questions/34558/how-can-i-get-some-environment-variables-into-init-el-to-construct-file-paths
             entry (file+headline (format "%s/emacs_notes/lim400_capture.org" (getenv "REPOS")) "Tasks")
             entry (file+headline (substitute-in-file-name "${REPOS}/emacs_notes/lim400_capture.org") "Tasks")

add date to property from [[https://emacs.stackexchange.com/questions/26119/org-mode-adding-a-properties-drawer-to-a-capture-template][stackexchange]]
#+BEGIN_SRC emacs-lisp
(defun add-property-with-date-captured ()
  "Add DATE_CAPTURED property to the current item."
  (interactive)
  (org-set-property "DATE_CAPTURED" (format-time-string "%F %T")))

(add-hook 'org-capture-before-finalize-hook 'add-property-with-date-captured)
#+END_SRC

still no completely working
https://emacs.stackexchange.com/questions/550/exec-path-and-path
https://stackoverflow.com/questions/135688/setting-environment-variables-on-os-x

Needed to change the ='= of setq 2nd parameter to =`= (backquote) and add the =,= in front of the function to generate the path.
With the old configuration I always got the error message, that the path was =nil=.

Still not sure what exactly is the difference. Should read up about this in the lisp manual.
Also look at =runx_emacs=. There I'm collected some of the notes I used to fix the problem.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
(setq org-capture-templates
        `(("t" "capture todos"
            entry (file+headline ,(concat (getenv "REPOS") "/notes/capture/capture.org") "Tasks")
            "* TODO %^{prompt}    %^g\n%i\n%a\n%?\n")
          ("n" "capture note"
            entry (file+headline ,(substitute-in-file-name "${REPOS}/notes/capture/capture.org") "Notes")
            "* %^{prompt}\n%?")
          ("j" "Journal entry"
            entry (file+datetree ,(concat (getenv "REPOS") "/notes/capture/journal.org"))
            "* %?\n")
          ("d" "datenabgleich"
            entry (file+datetree ,(concat (getenv "REPOS") "/notes/capture/datenabgleich.org"))
            "* %?\n")
          ("2" "CHM2T")
           ("2t" "capture todos"
             entry (file+headline ,(concat (getenv "REPOS") "/emacs_notes/chm2t_capture.org") "Tasks")
             "* TODO %^{prompt}    %^g\n%i\n%a\n%?\n")
           ("2j" "Journal entry"
             entry (file+datetree ,(concat (getenv "REPOS") "/emacs_notes/chm2t_journal.org"))
             "* %?\nEntered on %U\n  %i\n  %a")
          ("s" "code snippet"
            entry (file "/tmp/snippets.org")
            "* %?\n%(my/org-capture-code-snippet \"%F\")")
          ("6" "C64")
           ("6t" "capture todos"
             entry (file+headline ,(concat (getenv "REPOS") "/C64/capture.org") "Tasks")
             "* TODO %^{prompt}    %^g\n%i\n%a\n%?\n")
           ("6n" "capture note"
             entry (file+headline ,(concat (getenv "REPOS") "/C64/capture.org") "Notes")
             "* %^{prompt}\n%?")
           ("6j" "Journal entry"
             entry (file+datetree ,(concat (getenv "REPOS") "/C64/journal.org"))
             "* %?\n%i\n  %a")
          ("w" "org-protocol" entry (file "/tmp/refile.org")
               "* TODO Review %a\n%:initial\n" :immediate-finish t) ; from https://mediaonfire.com/blog/2017_07_21_org_protocol_firefox.html changed as it didn't work
         )
)
#+END_SRC

**** support functions
The _irreal_ post [[http://irreal.org/blog/?p=7207][Capturing Code Snippets]] directed me to the example on how to automate the information gathering for code snippets
from source code files.
#+BEGIN_SRC emacs-lisp
(defun my/org-capture-get-src-block-string (major-mode)
    "Given a major mode symbol, return the associated org-src block
    string that will enable syntax highlighting for that language

    E.g. tuareg-mode will return 'ocaml', python-mode 'python', etc..."

    (let ((mm (intern (replace-regexp-in-string "-mode" "" (format "%s" major-mode)))))
      (or (car (rassoc mm org-src-lang-modes)) (format "%s" mm))))

(defun my/org-capture-code-snippet ()
    (let ( (a "string a")
           (file-name (buffer-file-name))
           (b "string b"))
         (format "%s file: %s : %s >>%s<<" b f a file-name)))
#+END_SRC

/structure template expansion/ changed in 9.2 and needs adaption as it is incompatible with older version ([[https://orgmode.org/Changes_old.html][see change log]])
also read https://orgmode.org/Changes.html
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    '("S" . "summary"))
#+END_SRC

*** my keyboard macros
This will convert an Markdown link []() to an org mode link [[][]].

https://www.emacswiki.org/emacs/KeyboardMacros
    M-x name-last-kbd-macro
    M-x insert-kbd-macro ---> bekomme das macro als text

    wieder verwenden
    Zeile oben (fset) mit eval-region "einlesen"
    Zeike unten "interaktive" ausfuehren
    global-set-key (kbd "C-c a") 'my-macro
#+BEGIN_SRC emacs-lisp
(fset 'md-link2-org
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([58 115 35 92 91 92 40 46 42 92 41 92 93 40 92 40 46 42 92 41 41 35 91 91 92 50 93 91 92 49 93 93 35 return] 0 "%d")) arg)))
;; checked, 'm' is not defined, but there should be still a better key

; change /embed/ to /watch/ and delete all after ?
(fset 'mbb-youtube-link
   [?I ?\[ ?\[ escape ?/ ?e ?m ?b ?e ?d return ?c ?w ?w ?a ?t ?c ?h escape ?f ?? ?C ?\] ?\[ ?y ?o ?u ?t ?u ?b ?e ?  ?v ?i ?d ?e ?o ?\] ?\] escape])

;; also, move it from global to org key table
(global-set-key (kbd "C-c m") 'md-link2-org)
(global-set-key (kbd "C-c n") 'mbb-youtube-link)
#+END_SRC

*** org-drill
#+BEGIN_SRC emacs-lisp
;(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'org-learn)
;(require 'org-drill)

;(use-package org-drill
;  :config)
(require 'org-drill)
#+END_SRC
*** pictures
try [[https://github.com/abo-abo/org-download][org-download]] from abo-abo
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :config
  (setq-default org-download-image-dir "./pictures"))
#+END_SRC

*** org-protocol
not working at start-up, but after some time - it works
#+BEGIN_SRC emacs-lisp
(mbb/init-audit-message "--- org-protocol begin")
(require 'org-protocol)
(setq org-protocol-default-template-key "w")
(mbb/init-audit-message "--- org-protocol end")
#+END_SRC

** TODO evil
from evil [[https://github.com/emacs-evil/evil][home page]]
evil requires _undo tree_
not configured, did evil load it automatically from melpa?

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init (evil-mode 1)
;  :bind (("M-x" . smex) search function not only from the start, but the middle - didn't use that feature
;         :map evil-insert-state-map
;         ("M-x" . execute-extended-command))
)
#+END_SRC

For the vim-like motions of ">>" and "<<".
#+BEGIN_SRC emacs-lisp
(setq-default evil-shift-width tab-width)
#+END_SRC

*** line numbers
relative line numbers are now native

there is more to set, like /'visual/ the controls the wrapped line handling
#+BEGIN_SRC emacs-lisp
(setq-default display-line-numbers 'relative)
#+END_SRC

*** TODO increase/decrease numbers
Not part of default emacs. There is the [[https://github.com/cofi/evil-numbers][evil numbers]] module to add this feature.
In vim C-a and C-x are used. I think I shouldn't use C-x.
Start using the =default= C-+ and C--, but only in =normal= mode, as it is the default for =org table sum/substract=.
#+BEGIN_SRC emacs-lisp
(use-package evil-numbers
  :bind (("C-c +" . evil-numbers/inc-at-pt)
         ("C-c -" . evil-numbers/dec-at-pt)))
#+END_SRC
changed to :bind --- check if working *NO* at least not in org-mode, there =C-c -= is iterating to different list formats and =C-c += is not working, /normal/ text file is OK
  :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt)
)

*** test
cicles throug different cases
dossent find word borders, needs to be already in one of the different spellings
#+BEGIN_SRC emacs-lisp
(use-package evil-string-inflection)
#+END_SRC

*** evil-matchit
https://github.com/redguardtoo/evil-matchit

use _%_ like before to champ to matching brace
but it now works also for e.g. HTML tags

this is not perfect
with HTML-tags _together_ it will sometimes jump to the next
jumps behind _>_ if there is an open tag, it will jump to this end tag, if it is an end tag it works
need to be on 1st char of end tag _</_ is ignored, _<_ will even be the tag before
#+BEGIN_SRC emacs-lisp
(use-package evil-matchit
  :init (global-evil-matchit-mode 1)
)
#+END_SRC

*** TODO org
https://github.com/GuiltyDolphin/org-evil

is this working ? prerequisites are missing

#+begin_src emacs-lisp
(use-package org-evil)
#+end_src
** dired                                                            :IN_TEST:
#+BEGIN_SRC emacs-lisp
(use-package dired-narrow
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
#+END_SRC
** git
*** [[https://github.com/magit/magit][magit]]
Started to use magit.
What is with the default /version control/ handling of emacs?

Not sure what key to use. Looks like most use /C-x g/.
This key, like /C-c g/ was not used on my setup.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)))
#+END_SRC

** projectile
[[https://github.com/bbatsov/projectile][project on github]]

Known projects are stored in _~/.emacs.d/projectile-bookmarks.eld_. A _new_ project is automatically added if I edid a file that is
part of a git repo.

Had a look at the [[https://www.projectile.mx/en/latest/usage/][documentation]] and tested some commands, but nothing /stuck/ so far.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
    (projectile-global-mode)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
)
;; tip from Python IDE: if you really like the menu, show it immediately
;;(set ac-show-menu-immediately-on-auto-complete t)
#+END_SRC

** search
*** ripgrep
**** ONGOING [[https://github.com/Wilfred/deadgrep][deadgrep: fast, friendly searching with ripgrep and Emacs]] ([[https://reddit.com/r/emacs/comments/8x57ck/deadgrep_fast_friendly_searching_with_ripgrep_and/][Reddit]]) :READ:NOTES:
#+BEGIN_COMMENT
this is also a front end for =rg= (ripgrep)

read his [[https://github.com/Wilfred/deadgrep/blob/master/docs/ALTERNATIVES.md][ALTERNATIVES]] to see the =competition=
most also use repgrip in the background
not sure what makes /deadgrep/ special
#+END_COMMENT

***** [[https://github.com/dajva/rg.el][rg.el]]
targets =rg=, and the results buffer shows what type of search occurred.

It's built on =compilation-mode=, and you can use =rg-group-result= to combine results.

*Great for*: if you want a ripgrep tool with excellent test coverage, you have =compilation-mode= shortcuts, or if you do lots of searches for words (=rg-dwim= is excellent).

***** [[https://github.com/nlamirault/ripgrep.el][ripgrep.el]]
and projectile-ripgrep (part of the same project), is an alternative to rg.el.

This is also using =compilation-mode= without grouping results.

*Great for*: ripgrep searches starting in the project root.

***** [[https://github.com/nlamirault/socyl][Socyl]]
is a generic text search tool that supports =rg= plus others.

Socyl is also based on =compilation-mode=, and does not group results by file AFAICS. As it's generic, users must specify a search backend, as well as specifying the directory.

*Great for*: Using the same search UI with multiple different search tools.

***** [[https://github.com/cosmicexplorer/helm-rg][helm-rg]]
targets Helm users.

helm-rg is a [[https://github.com/emacs-helm/helm][Helm]] frontend for =rg=. In addition to the usual search features, it treats spaces in search terms specially so you
don't need to worry about order. This neat feature means that =foo bar= is equivalent to =foo.*bar|bar.*foo=.

*Great for*: Using rg with Helm, especially with multiple search terms.
*** my setup
[[https://github.com/BurntSushi/ripgrep][ripgrep]] the =rust= search tool project. There are some /benchmarks/ and also some other nice informations.

#+BEGIN_SRC emacs-lisp
(use-package ripgrep
  :after projectile)
#+END_SRC
missing some features see [[id:8FA93FFD-14A1-456E-8EC5-D2298E6CCAE2][Zamansky 73]]

helm-grep-do-git-grep
start typing and /wait/ - selection will apear and I'm able to change live the result

projectile-ripgrep
search result is displayed in /error buffer/
- M-g M-n | M-g n | C-x ` :: Visit the locus of the next error message or match (=next-error=).
- M-g M-p | M-g p :: Visit the locus of the previous error message or match (=previous-error=).
- M-n :: M| ove point to the next error message or match, without visiting its locus (=compilation-next-error=).
- M-p :: Move point to the previous error message or match, without visiting its locus (=compilation-previous-error=).
- M-} :: Move point to the next error message or match occurring in a different file (=compilation-next-file=).
- M-{ :: Move point to the previous error message or match occurring in a different file (=compilation-previous-file=).
- C-c C-f :: Toggle Next Error Follow minor mode, which makes cursor motion in the compilation buffer produce automatic source display.
- g :: Re-run the last command whose output is shown in the =*compilation*= buffer.

not everything worked as expected
https://emacs.stackexchange.com/questions/10842/recursive-grep-in-directory-with-helm-and-or-projectile


TODO: there are multiple ripgrap and projectile packages - what are the differences?

** helm
https://github.com/emacs-helm/helm

in an old config I used: (require 'helm-config)

#+BEGIN_SRC emacs-lisp
(use-package helm
  :bind (("C-x b" . helm-buffers-list)
         ("C-x r b" . helm-bookmarks)))
#+END_SRC

Starting with emacs 26 it is possible to use popup windows, so called [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Child-Frames.html#Child-Frames][child-frames]].
#+BEGIN_SRC emacs-lisp
(use-package helm-posframe)
#+END_SRC

#+RESULTS:

setup ripgrep to be used
why would I need
#+BEGIN_SRC emacs-lisp
(setq helm-grep-ag-command "rg --color=always --smart-case --no-heading --line-number %s %s %s")
#+END_SRC

also there are other packages, like [[https://github.com/cosmicexplorer/helm-rg][helm-rg]]
what are the advantage/difference to the other packages or /nacked/ helm?



*** TODO from interview with Sacha
*Q:* Not many packages are nearly as powerful as Helm. Being so, it may be hard for potential users to understand its value and
potential. How could newcomers be encouraged to contribute to Helm’s development?

*A:* People are often thinking that helm is a vertical version of ido, but it’s not: it’s much more powerful. It would be too long
to enumerate all that it does, but here’s a small example among the many features helm provides:

In ido or similar tools, when you complete files, the only thing you can do is press RET to jump to a file. With helm there are
actually 44 actions possible, not including the ones that are automatically added depending on the context (i.e. filtered
actions). All of these actions are applicable to one or many marked files, whereas in ido you can act on only one file. If you need
a specific action that’s not part of helm by default, you can add it into the helm framework, which is same philosophy as Emacs.

#+BEGIN_COMMENT
should look into these features
#+END_COMMENT
*** insert Sonderzeichen
comment from [[http://irreal.org/blog/?p=6623#comment-3540040227][John Kitchin]] points to this function as part of his [[https://github.com/jkitchin/scimax/blob/master/scimax-org.el][scimax package]]
#+BEGIN_EXAMPLE
M-x helm-insert-org-entity
uu
F2
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
(defun helm-insert-org-entity ()
  "Helm interface to insert an entity from `org-entities'.
F1 inserts utf-8 character
F2 inserts entity code
F3 inserts LaTeX code (does not wrap in math-mode)
F4 inserts HTML code
F5 inserts the entity code."
  (interactive)
  (helm :sources
	(reverse
	 (let ((sources '())
	       toplevel
	       secondlevel)
	   (dolist (element (append
			     '("* User" "** User entities")
			     org-entities-user org-entities))
	     (when (and (stringp element)
			(s-starts-with? "* " element))
	       (setq toplevel element))
	     (when (and (stringp element)
			(s-starts-with? "** " element))
	       (setq secondlevel element)
	       (add-to-list
		'sources
		`((name . ,(concat
			    toplevel
			    (replace-regexp-in-string
			     "\\*\\*" " - " secondlevel)))
		  (candidates . nil)
		  (action . (("insert utf-8 char" . (lambda (x)
						      (mapc (lambda (candidate)
							      (insert (nth 6 candidate)))
							    (helm-marked-candidates))))
			     ("insert org entity" . (lambda (x)
						      (mapc (lambda (candidate)
							      (insert
							       (concat "\\" (car candidate))))
							    (helm-marked-candidates))))
			     ("insert latex" . (lambda (x)
						 (mapc (lambda (candidate)
							 (insert (nth 1 candidate)))
						       (helm-marked-candidates))))
			     ("insert html" . (lambda (x)
						(mapc (lambda (candidate)
							(insert (nth 3 candidate)))
						      (helm-marked-candidates))))
			     ("insert code" . (lambda (x)
						(mapc (lambda (candidate)
							(insert (format "%S" candidate)))
						      (helm-marked-candidates)))))))))
	     (when (and element (listp element))
	       (setf (cdr (assoc 'candidates (car sources)))
		     (append
		      (cdr (assoc 'candidates (car sources)))
		      (list (cons
			     (format "%10s %s" (nth 6 element) element)
			     element))))))
	   sources))))
#+END_SRC
** mail
Should I use /gnus/ again? Or continue with mutt?

alternatives
- [[https://www.emacswiki.org/emacs/mu4e][mu4e]] like mu
** dictionary
*** sdcv
commands you can use:
- sdcv-search-pointer: Search around word and display with buffer
- sdcv-search-pointer+: Search around word and display with =popup tooltip=
- sdcv-search-input: Search input word and display with buffer
- sdcv-search-input+: Search input word and display with =popup tooltip=

If current mark is active, sdcv commands will translate region string, otherwise translate word around point.

And then you need set two options.
- sdcv-dictionary-simple-list:   a simple dictionary list for popup tooltip display
- sdcv-dictionary-complete-list: a complete dictionary list for buffer display

Example, setup like this:

#+BEGIN_SRC emacs-lisp
(use-package sdcv
  :bind (("C-c d a" . sdcv-search-input)
         ("C-c d b" . sdcv-search-pointer+))
  :config
    (setq sdcv-dictionary-simple-list
        '("German - English"
            "English - German"))
    (setq sdcv-dictionary-complete-list
        '("German - English"
            "English - German")))
#+END_SRC
*** TODO [[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][powerthesaurus]]
https://github.com/SavchenkoValeriy/emacs-powerthesaurus
selected word or input
result in minibuffer, only one line, difficult to find a word
the original word will be replaced
#+BEGIN_SRC emacs-lisp
(use-package powerthesaurus
  :bind (("C-c d p" . powerthesaurus-lookup-word-at-point)))
#+END_SRC
#+BEGIN_COMMENT
not working May 2019, getting back a 403 Forbidden - Jun 2019 working again, author provided a fix for the API change

but I still have the problem, that the /word/ the point is on is not used
and also after the lookup, there is no word, *need first to press TAB to see a selection*
should look for an other package?

/mw-thesaurus.el/ also provides a definition, but uses the /new/ Merriam-Webster and also needs an account (default is the developer)
#+END_COMMENT
*** define-word
needed to enter the word, didn't use the word at point, as advertised
#+BEGIN_SRC emacs-lisp
(use-package define-word
  :bind (("C-c d d" . define-word)))
#+END_SRC
*** Merriam-Webster
https://github.com/agzam/mw-thesaurus.el
#+BEGIN_SRC emacs-lisp
(use-package mw-thesaurus
  :bind (("C-c d m" . mw-thesaurus-lookup-at-point)) ; the only command
)
#+END_SRC

- RET :: lookup for the word
  not sure when to press
- q :: kill mw-thesaurus buffer and close the window
  for this to work (in mw buffer) evil needs to be in insert mode

interestingly in an other post was a link to the US word bijou by a British guy
do not get an result , but the [[https://www.merriam-webster.com/dictionary/bijou][web link]] will find the word :-(
this was not the only word where it didn't return a (known) result, e.g. /British/

* programming
#+begin_src emacs-lisp
;; Use cperl-mode instead of the default perl-mode
(defalias 'perl-mode 'cperl-mode)
#+end_src
** common
C-j electric-newline-and-maybe-indent
M-j indent-new-comment-line

*** comment box
Following [[http://pragmaticemacs.com/emacs/comment-boxes/][Ben Maughan]] to the original post from [[http://irreal.org/blog/?p=374][irreal]] to get the better explanation of the function.

- will ignore empty lines (sometimes it failed if the 1st line was empty
- box will start at indentation of selection
#+BEGIN_SRC emacs-lisp
(defun mbb-comment-box (b e)
"Draw a box comment around the region but arrange for the region to extend to at least the fill column. Place the point after the comment box."

(interactive "r")

(let ((e (copy-marker e t)))
  (goto-char b)
  (end-of-line)
  (insert-char ?  (- fill-column (current-column)))
  (comment-box b e 1)
  (goto-char e)
  (set-marker e nil)))

(global-set-key (kbd "C-c b b") 'mbb-comment-box)
#+END_SRC

#+RESULTS:
: mbb-comment-box

*** [[https://gitlab.com/jgkamat/rmsbolt][RMSbolt]]

#+BEGIN_SRC emacs-lisp
(use-package rmsbolt)
#+END_SRC

** C/C++
see https://www.emacswiki.org/emacs/IndentingC

https://github.com/Sarcasm/irony-mode

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x c") 'compile)

;(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
;(setq 'cperl-indent-level 2)

(setq c-default-style "stroustrup"
    c-basic-offset 2)
#+END_SRC

*** test [[https://github.com/emacs-lsp/lsp-mode][lsp]]
I think this is the modern way - start here

should use =clangd= as this is the one from the actual llvm project, see https://clang.llvm.org/extra/clangd/Installation.html
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook (c-mode . lsp)
  :commands lsp)

;; optionally
(use-package lsp-ui
  :commands lsp-ui-mode)
(use-package company-lsp
  :commands company-lsp)
(use-package helm-lsp
  :commands helm-lsp-workspace-symbol)
#+END_SRC

#+RESULTS:

;*** irony
;#+BEGIN_COMMENT
;there a quite some hints to use /cquery= or =ccls= instead
;this should be the more modern and still developed packages - not sure about this
;
;Both look to be LSP baesd and ccls should have C++11 and C++17 features.
;#+END_COMMENT
;
;#+BEGIN_SRC emacs-lisp
;(use-package irony
;  :config
;  (add-hook 'c++-mode-hook 'irony-mode)
;  (add-hook 'c-mode-hook 'irony-mode)
;  (add-hook 'objc-mode-hook 'irony-mode)
;
;  ;; replace the `completion-at-point' and `complete-symbol' bindings in
;  ;; irony-mode's buffers by irony-mode's function
;  (defun my-irony-mode-hook ()
;    (define-key irony-mode-map [remap completion-at-point]
;      'irony-completion-at-point-async)
;    (define-key irony-mode-map [remap complete-symbol]
;      'irony-completion-at-point-async))
;  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
;  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
;#+END_SRC
;
;Zamansky 55 hash only
;  ensure t
;  config
;  add-hook c++, c and irony-cdb-autosetup-compile-options
;
;on new Fedoray is /libclang/ missing - that why it stopped working
;needed to install clang development package
;#+BEGIN_EXAMPLE
;dnf install clang-devel
;#+END_EXAMPLE
;
;on Mac mini compile failed, as /cmake/ is missing
;
;add company mode, example from [[https://jamiecollinson.com/blog/my-emacs-config/][Jamie]] (same for Zamansky 55)
;look deeper into his config, as it is nicely formatted
;#+BEGIN_SRC emacs-lisp
;  (use-package company-irony
;    :config
;    (add-to-list 'company-backends 'company-irony))
;#+END_SRC
;
;*** tags
;some people preferred [[https://github.com/cquery-project/cquery][cquery]]/[[https://github.com/MaskRay/ccls][ccls]] over rtags - is this for /static/ code base, e.g. analysing existing code?
;#+BEGIN_SRC emacs-lisp
;(use-package rtags)
;#+END_SRC
;not sure what happened, an update of packages on t30 removed this and the flycheck-rtags package as =unused=
** python
from all what I've read =elpy= is complicated to set up and only a conclomerate of existing packages
so I was deciding between =jedi= and =anaconda=
on [[https://www.reddit.com/r/emacs/comments/3a6v2i/jediel_vs_anaconda_mode/][reddit]] it looks like there are equaly many developer liking one or the other
but =anaconda= is the more modern one and used in other projects, like =spacemacs=
so I think this is the better choice

https://lists.gnu.org/archive/html/help-gnu-emacs/2015-04/msg00267.html
#+BEGIN_SRC emacs-lisp
  ; https://github.com/proofit404/anaconda-mode
  (use-package anaconda-mode
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))

;  (add-hook 'python-mode-hook 'eldoc-mode)

  ; https://github.com/proofit404/company-anaconda
  (use-package company-anaconda
    :config
    (add-to-list 'company-backends 'company-anaconda))
#+END_SRC

** flycheck
Started with the blog post [Using Emacs 12](http://cestlaz.github.io/posts/using-emacs-12-python/).
http://melpa.org/#/flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (global-flycheck-mode t))
#+END_SRC
from flycheck-rtags melpa page
#+BEGIN_QUOTE
Optional explicitly select the RTags Flycheck checker for c or c++ major mode.
Turn off Flycheck highlighting, use the RTags one.
Turn off automatic Flycheck syntax checking rtags does this manually.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(use-package flycheck-rtags
  :config
  (defun my-flycheck-rtags-setup ()
    "Configure flycheck-rtags for better experience."
    (flycheck-select-checker 'rtags)
    (setq-local flycheck-check-syntax-automatically nil)
    (setq-local flycheck-highlighting-mode nil))
  (add-hook 'c-mode-hook 'my-flycheck-rtags-setup)
  (add-hook 'c++-mode-hook 'my-flycheck-rtags-setup)
  (add-hook 'objc-mode-hook 'my-flycheck-rtags-setup)
)
#+END_SRC

need to set this, depending on OS installation, as otherwise the interpreter used is /2/
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
;;(setq python-shell-interpreter-args "-m IPython --simple-prompt -i") -- not sure for what this is needed
(setq flycheck-python-pycompile-executable "python3"
      flycheck-python-pylint-executable "python3"
      flycheck-python-flake8-executable "python3")
#+END_SRC
** JavaScrip
Read before starting the setup.
- [[http://blog.binchen.org/posts/use-js2-mode-as-minor-mode-to-process-json.html][JSON]]
- [[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][Emacs café: Setting up Emacs for JavaScript (part #1)]]
- [[https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html][Emacs café: Setting up Emacs for JavaScript (part #2)]]
** shell                                                            :IN_TEST:
test highlighting
looks like it doesn't work - dell after reboot
#+BEGIN_SRC emacs-lisp
(defconst sh-mode--string-interpolated-variable-regexp
  "{\\$[^}\n\\\\]*\\(?:\\\\.[^}\n\\\\]*\\)*}\\|\\${\\sw+}\\|\\$\\sw+")

(defun sh-mode--string-intepolated-variable-font-lock-find (limit)
  (while (re-search-forward sh-mode--string-interpolated-variable-regexp limit t)
    (let ((quoted-stuff (nth 3 (syntax-ppss))))
      (when (and quoted-stuff (member quoted-stuff '(?\" ?`)))
        (put-text-property (match-beginning 0) (match-end 0)
                           'face 'font-lock-variable-name-face))))
  nil)

(eval-after-load 'sh-mode
  '(progn
     (font-lock-add-keywords
      'sh-mode
      `((sh-mode--string-intepolated-variable-font-lock-find))
      'append)))
#+END_SRC

#+RESULTS:

** YAML
use [[https://github.com/yoshiki/yaml-mode][yaml-mode]]
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

use [[https://github.com/krzysztof-magosa/flycheck-yamllint/blob/c2b273d84f15bd03464d6722391e595d7c179a5c/flycheck-yamllint.el][flycheck yamllint]] and used there /use-package/ example
in fedora installed yamllint via dnf - otherwise use pip
#+BEGIN_SRC emacs-lisp
(use-package flycheck-yamllint
  :defer t
  :init
  (progn
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))
#+END_SRC
* test
** THINK [[https://github.com/alpha22jp/atomic-chrome][atomic chrome]]
#+BEGIN_SRC emacs-lisp
;(use-package atomic-chrome)
;(atomic-chrome-start-server)
#+END_SRC

not using - there is also a firefox plugin https://addons.mozilla.org/en-US/firefox/addon/ghosttext/
also for chrome I think this is the successor https://github.com/GhostText/GhostText

** [[http://xenodium.com/#actionable-urls-in-emacs-buffers][actionable URLs in Emacs buffers]]
use C-c C-o to open URL in browser not only for org-buffer
his configuration wiht =:hook= didn't work - not known
added the lines seperately
#+BEGIN_SRC emacs-lisp
(use-package goto-addr
  :init
    (add-hook 'compilation-mode 'goto-address-mode)
    (add-hook 'prog-mode 'goto-address-prog-mode)
    (add-hook 'eshell-mode 'goto-address-mode)
    (add-hook 'shell-mode 'goto-address-mode)
  :bind (:map goto-address-highlight-keymap
              ("C-c C-o" . goto-address-at-point))
              ;("M-<RET>" . newline)
  :commands (goto-address-prog-mode
             goto-address-mode))
#+END_SRC

** quickrun
https://github.com/syohex/emacs-quickrun
** [[https://github.com/joaotavora/yasnippet][yasnippet]]
The /default/ snippets are here https://github.com/AndreaCrotti/yasnippet-snippets/tree/9ce0b05f4b4d693831e67dd65d660716a8192e8d
Should have a look which ones to use, to not overflow my choice. Many of these I find useless, e.g. yaml ($1: $0)


Chen Bin:
    My tip is to assign a unique hot key for yas/expand. So you can use single character as the key of your most frequently used
    snippet. "a" for assert "l" for log and "i" for include. Other snippets are rarely used actually.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :init
    (setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
        ;"/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
        ;"/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
        ))
  :config (yas-global-mode))
#+END_SRC

*** [[https://github.com/AndreaCrotti/yasnippet-snippets][examples/defaults in own repo]]
check which ones to use

** missing
*** from VB LXDE
Should check if the jedi/autocomplete configuration conflict with one of the other now used projects.
If I remember correctly the Python setup didn't work.

**** call search engine
https://github.com/hrs/engine-mode
https://www.youtube.com/watch?v=MBhJBMYfWUo

default key binding C-x /
  :x / s
will trigger the stackoverflow search with selection

(require 'engine-mode)
(engine-mode t)
(defengine stack-overflow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "s")

(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "E"
  :docstring "Searchin' the wikis.")

**** some autocomplete test

(require 'jedi)
;; hook up to autocomplete
(add-to-list 'ac-sources 'ac-source-jedi-direct)
;; enable for python-mode
(add-hook 'python-mode-hook 'jedi:setup)

;;;
;;; the below is from youtube video
;;;
; https://www.youtube.com/watch?v=HTUE03LnaXA
; https://github.com/byuksel/Emacs-as-a-C-Cplusplus-Editor-IDE-settings/blob/master/.emacs
; search for _auto-complete_ on melpa to get more features, e.g. for clang or haskel
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

; missing are flymake (not sure, shouldn't I use flycheck?
; but he used it for the google coding style
; + some more

; https://github.com/auto-complete/auto-complete
; http://auto-complete.org/doc/manual.html

** Imenu

https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html
The Imenu facility offers a way to find the major definitions in a file by name.
Could be used in a C file to see all function definitions.

https://github.com/bmag/imenu-list
this will give a much better selection for /Imenu/

** outorg
https://github.com/tj64/outorg
switch from programming language to org mode for simpler commenting the code

** gtags
   https://github.com/syohex/emacs-helm-gtags

*dwim* looks like a usefull command *M-]*
Still not sure what to use to jump to definition of /name/ under cursor/.

The simple example I've seen in /planet emacs/ didn't work properly.
Started to collect information from the projects.
Basic /gtags/ search worked.

Use /ggtags/ (uninstalled) or /helm-gtags/.
Will use /helm-gtags/.

Found a good [[http://tuhdo.github.io/c-ide.htm][C-IDE]] description and started to follow. This came from [[http://emacs.stackexchange.com/questions/801/how-to-get-intelligent-auto-completion-in-c][emacs stackexchange]].
Read all his other instructions.

#+BEGIN_SRC emacs-lisp
(use-package helm-gtags
  :init
  (custom-set-variables
    '(helm-gtags-path-style 'relative)
    '(helm-gtags-ignore-case t)
    '(helm-gtags-auto-update t)
    '(helm-gtags-use-input-at-cursor t)
    '(helm-gtags-pulse-at-cursor t)
    '(helm-gtags-prefix-key "\C-cg")
    '(helm-gtags-suggested-key-mapping t))
  :config
    (add-hook 'dired-mode-hook 'helm-gtags-mode)
    (add-hook 'eshell-mode-hook 'helm-gtags-mode)
;    (add-hook 'c-mode-hook 'helm-gtags-mode)
;    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (add-hook 'asm-mode-hook 'helm-gtags-mode)
    (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
    (define-key helm-gtags-mode-map (kbd "M-]") 'helm-gtags-dwim)
    (define-key helm-gtags-mode-map (kbd "M-[") 'helm-gtags-pop-stack)
    (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
    (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))

#+END_SRC

#+RESULTS:
: helm-gtags-next-history

didn't work, get void :map
  :bind (:map helm-gtags-mode-map
         ("C-c g a" . helm-gtags-tags-in-this-function)
         ("C-j" . helm-gtags-select)
         ("M-." . helm-gtags-dwim) --- at least this one doesn't work due to eval mode (command (repeat last command), in insert OK)
         ("M-," . helm-gtags-pop-stack)
         ("C-c <" . helm-gtags-previous-history)
         ("C-c >" . helm-gtags-next-history)))

** NO speedbar
   didn't use this feature in eclipse
   it still looks /as bad/ as some years ago
** auto complete
looks like /company/ is the prefered solution.
what about projectile, I instlled from the Python IDE example?

http://emacs.stackexchange.com/questions/712/what-are-the-differences-between-autocomplete-and-company-mode
https://www.reddit.com/r/emacs/comments/2ekw22/autocompletemode_vs_companymode_which_is_better/

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-show-numbers t) ; press M-nthDigit to select
  )
#+END_SRC

** [[https://github.com/abo-abo/ace-window][ace-window]]
got it from Mike Zamansky [[http://cestlaz.github.io/posts/using-emacs-5-windows/][video 5]]

with more than two window [[https://github.com/abo-abo/ace-window#change-the-action-midway][extra commands]] are possible
like =m= to swap windows

to swap windows if there are only two us *C-u C-x o*

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :init
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+END_SRC

Looks like this /disables/ the 2/3 window handling. At this point the /active/ window is the small one

*** alternatives
=window-jump= will jump to the closest window in a particular direction (left, right, up or down).
This is more predictable than the normal jump, but still not as /precise/ as a direct jump.
** lua
http://immerrr.github.io/lua-mode/

disabled due error with 27.1
Error (use-package): lua-mode/:catch: Unknown rx form ‘symbol’
#+BEGIN_SRC emacs-lisp
;(use-package lua-mode)
#+END_SRC

** using emacs
*** 1

#+BEGIN_SRC emacs-lisp
(use-package try)

(use-package which-key
  :config
  (which-key-mode))
#+END_SRC

*** expand region
    from cestlaz 17
    does this work with eval mode?
    #+BEGIN_SRC emacs-lisp
      (use-package expand-region
        :config
        (global-set-key (kbd "C-=") 'er/expand-region))
    #+END_SRC
** markdown
Create own cheatsheet from:
- [Mastering Markdown](https://guides.github.com/features/mastering-markdown/)
- [Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)

Started with _Sacha_  [[https://www.reddit.com/r/emacs/comments/5jvr5i/is_it_possible_to_realtime_preview_markdown_in/][Is it possible to real-time preview markdown in Emacs]]
One recommendation there was [[https://github.com/mola-T/flymd][flymd]] on [[http://wikemacs.org/wiki/Markdown#Live_preview_as_you_type][wikiemacs]]
*** flymd
runs javascript from _rawgit.com_
update only after file is saved
working only with _firefox_
#+BEGIN_SRC emacs-lisp
;(use-package flymd)
#+END_SRC

*** [[http://jblevins.org/projects/markdown-mode/][markdown mode]]
No sure where I got the hint to try this one.
It is also part of the _reddit_ recommendation above.
But as I had red it, I didn't ty it. Can't remember why.

markdown-toggle-inline-images
default key shortcut C-c C-x C-i ist not working

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
*** TODO fence edit
provides a convenient way to edit the contents of "fenced code blocks" used by markup formats like Markdown in a dedicated window
set to the major mode appropriate for its language
https://github.com/aaronbieber/fence-edit.el

** epub
https://github.com/wasamasa/nov.el
nur lesen

https://github.com/bddean/emacs-ereader
mit org-mode und annotations

#+BEGIN_SRC emacs-lisp
(use-package ereader)
#+END_SRC
** THINK evil-expat

http://melpa.org/#/evil-expat

this will add some vim _ex_ commands like :DiffOrig or :Remove
but many like :Tyank, :Tput (tmux related) or :colorscheme I will not use or need

** eyebrowse
read many thinks about it, but still not sure

*** [[https://www.reddit.com/r/emacs/comments/6sffrd/am_i_misunderstanding_eyebrowse/][Am I misunderstanding eyebrowse?]]
interesting read, but I still not sure if this is for me
- use i3 to manage different emacs-client
  - OK for different projects, e.g. notes, CHM2T, ...
- use a special page with calc and other littele tools to have a fix window size
  - this I think I should try

*** [[http://pragmaticemacs.com/emacs/easily-manage-emacs-workspaces-with-eyebrowse/][Pragmatic Emacs: Easily manage Emacs workspaces with eyebrowse]]

#+BEGIN_EXAMPLE
(use-package eyebrowse
    :diminish eyebrowse-mode
    :config (progn
            (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
            (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
            (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
            (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
            (eyebrowse-mode t)
            (setq eyebrowse-new-workspace t)))
#+END_EXAMPLE

The enables the shortcuts =M-1= to =M-4= to access 4 virtual desktops (N.B. you will have to [[http://pragmaticemacs.com/emacs/use-your-digits-and-a-personal-key-map-for-super-shortcuts/][disable]] the =M-=numeric prefixes
first). Of course you can add more than 4 if you need to.

Now you will start by default in workspace 1. If you hit =M-2= you will switch to a new empty workspace, numbered 2 in the
modeline. It will initially just contain the scratch buffer, since we used =(setq eyebrowse-new-workspace t)=. Open whichever
buffers and window arrangements you like then hit =M-1=to switch back to the first desktop where you will see the windows and
buffers you had set up there.

A useful command is =C-c C-w ,= (N.B. the comma is part of the command!) which runs =eyebrowse-rename-window-config= allowing you to
name a workspace, and that name then appears in the modeline instead of the workspace number.

** [[https://github.com/Wilfred/helpful][helpful]]
got this from /sacha 20181217/
#+BEGIN_SRC emacs-lisp
(use-package helpful)
#+END_SRC
** [[https://github.com/abo-abo/avy][avy]]
looks better than [[https://github.com/winterTTr/ace-jump-mode][ace jump]] - didn't find a comparision, but lately more are using ace
possible functions:
- avy-goto-char
- avy-goto-char-2
- avy-goto-char-timer
  - type as many as needed (update on the fly during delete)
  - press return, no /timeout/ needed
- avy-goto-line
- avy-goto-word-1
- avy-goto-word-0

new with 0.5.0
- avy-org-goto-heading-timer *try*
- avy-org-refile-as-child

#+BEGIN_QUOTE
There are some more commands which you can explore yourself by looking at the code.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind (("M-s ;" . avy-goto-word-1)
         ("M-s l" . avy-goto-line)
         ("M-s '" . avy-goto-char-2)
         ("M-s ~" . avy-goto-char-timer)))
#+END_SRC

*** New dispatch actions
Suppose you have bound:

#+BEGIN_EXAMPLE
    (global-set-key (kbd "M-t") 'avy-goto-word-1)
#+END_EXAMPLE

and a word that starts with a "w" and is select-able with "a". Here's what you can do now:

- M-t w a to jump there
- M-t w x a - =avy-action-kill-move=: kill the word and move there,
- M-t w X a - =avy-action-kill-stay=: kill the word without moving the point,
- M-t w i a - =avy-action-ispell=: use ispell/flyspell to correct the word,
- M-t w y a - =avy-action-yank=: yank the word at point,
- M-t w t a - =avy-action-teleport=: kill the word and yank it at point,
- M-t w z a - =avy-action-zap-to-char=: kill from point up to selected point.

You can customize =avy-dispatch-alist= to modify these actions, and also ensure that there's no overlap with your =avy-keys=, if you customized them.

*** Restarting an =avy= search
Suppose you jumped to a word that starts with "a". Now you want to jump to a different word that also starts with "a". You can use =avy-resume= for this.

Additionally, you can use =avy-next= and =avy-prev= to cycle between the last =avy= candidates. Here's an example hydra to facilitate it:

#+BEGIN_EXAMPLE
    (defhydra hydra-avy-cycle ()
      ("j" avy-next "next")
      ("k" avy-prev "prev")
      ("q" nil "quit"))

    (global-set-key (kbd "C-M-'") 'hydra-avy-cycle/body)
#+END_EXAMPLE

** mpv
#+BEGIN_SRC emacs-lisp
(org-add-link-type "mpv" #'mpv-play)
(defun org-mpv-complete-link (&optional arg)
  (replace-regexp-in-string
   "file:" "mpv:"
   (org-file-complete-link arg)
   t t))
(add-hook 'org-open-at-point-functions #'mpv-seek-to-position-at-point)

(defun org-timer-item--mpv-insert-playback-position (fun &rest args)
  "When no org timer is running but mpv is alive, insert playback position."
  (if (and
       (not org-timer-start-time)
       (mpv-live-p))
      (mpv-insert-playback-position t)
    (apply fun args)))
(advice-add 'org-timer-item :around
            #'org-timer-item--mpv-insert-playback-position)
#+END_SRC

** Visually highlight the selected buffer
#+BEGIN_SRC emacs-lisp
;(use-package dimmer
;  :config
;    (dimmer-mode t)
;)
#+END_SRC
this is not working on org buffers
if I don't like this try =auto-dim-other-buffers=
#+BEGIN_SRC emacs-lisp
;(use-package auto-dim-other-buffers)
#+END_SRC
OK, also working with org buffers
*ACHTUNG* in case of =M-x= (:) the minibuffer is /highlighted/ and I don't see on which buffer the command would run
** emoji
#+begin_src emacs-lisp
(use-package unicode-fonts
   :ensure t
   :config
    (unicode-fonts-setup))
#+end_src
* last steps
If done at begin of script the _scrollbar_ and _fringe_ change.
A litter later these are bag as before. Try now as the last step of the configuration.

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
;(fringe-mode 1) ;; show glyphs regarding the line - this reduced the buffer frame
                 ;; if set to _1_ not linewraps etc are displayed
                 ;; 0 will show the _terminal_ character
#+END_SRC
** [[https://github.com/syohex/emacs-anzu][anzu]]
minor mode which displays current match and total matches information in the mode-line in various search modes

=anzu-query-replace-at-cursor=
shows number of matches, *SPACE* or *y* replace, *DEL* or *n* ignore
more see help
#+BEGIN_SRC emacs-lisp
(use-package anzu)
#+END_SRC

on =Mac mini= I had to disable it as the start-up failed some times - what was the cause?

** test indentation highligther
https://github.com/antonj/Highlight-Indentation-for-Emacs

https://github.com/DarthFennec/highlight-indent-guides


#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :config
    (setq highlight-indent-guides-method 'character))

(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
#+END_SRC

** test ansi colour
worked for foreground but background kept white

#+BEGIN_SRC emacs-lisp
(setq term-default-bg-color nil)
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+END_SRC
** [[https://github.com/skeeto/elfeed][elfeed]]
try with youtube subscriptions

#+BEGIN_SRC emacs-lisp
(setq elfeed-db-directory "~/repos/databases/elfeeddb")
(setq elfeed-feeds
      '("http://www.50ply.com/atom.xml"
        "https://www.youtube.com/feeds/videos.xml?channel_id=UCcTt3O4_IW5gnA0c58eXshg"
        "https://www.youtube.com/feeds/videos.xml?channel_id=UClrMJRlvoyoWsVlB-7c61PQ"))
(use-package elfeed)
#+END_SRC
** PDF-Tools
https://github.com/politza/pdf-tools
https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx
#+begin_src emacs-lisp
(use-package pdf-tools
  :config
  (custom-set-variables
    '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
(pdf-tools-install)
#+end_src

#+begin_src emacs-lisp
(use-package org-pdftools
  :hook (org-load-hook . org-pdftools-setup-link))
#+end_src
** ledger
Had tried =hledger-mode=, but never got it working properly.
Also it has /rupee/ in function names and the /sign/ is pre-amount.

